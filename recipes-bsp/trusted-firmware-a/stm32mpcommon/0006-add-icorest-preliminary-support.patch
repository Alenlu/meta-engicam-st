From 2c0ba411c07f6902035fd5ceb74eb570664f6bb0 Mon Sep 17 00:00:00 2001
From: Matteo Lisi <matteo.lisi@engicam.com>
Date: Tue, 26 Mar 2019 13:51:25 +0100
Subject: [PATCH 6/6] add icorest preliminary support

---
 fdts/stm32mp15-icore-mx.h          | 119 ++++++++++
 fdts/stm32mp157a-icorestm32-mx.dts | 350 +++++++++++++++++++++++++++++
 2 files changed, 469 insertions(+)
 create mode 100644 fdts/stm32mp15-icore-mx.h
 create mode 100644 fdts/stm32mp157a-icorestm32-mx.dts

diff --git a/fdts/stm32mp15-icore-mx.h b/fdts/stm32mp15-icore-mx.h
new file mode 100644
index 0000000..50f287f
--- /dev/null
+++ b/fdts/stm32mp15-icore-mx.h
@@ -0,0 +1,119 @@
+/*
+ * Copyright (C) 2015-2018, STMicroelectronics - All Rights Reserved
+ *
+ * SPDX-License-Identifier:	GPL-2.0+	BSD-3-Clause
+ *
+ */
+
+/*
+ * File generated by STMicroelectronics STM32CubeMX DDR Tool for MPUs
+ * DDR type: DDR3 / DDR3L
+ * DDR width: 32bits
+ * DDR density: 4Gb
+ * System frequency: 480000Khz
+ * Relaxed Timing Mode: false
+ * Address mapping type: RBC
+ *
+ * Save Date: 2019.03.25, save Time: 11:12:22
+ */
+
+#define DDR_MEM_NAME	"DDR3-DDR3L 32bits 480000Khz"
+#define DDR_MEM_SPEED	480000
+#define DDR_MEM_SIZE	0x20000000
+
+#define DDR_MSTR 0x00040401
+#define DDR_MRCTRL0 0x00000010
+#define DDR_MRCTRL1 0x00000000
+#define DDR_DERATEEN 0x00000000
+#define DDR_DERATEINT 0x00800000
+#define DDR_PWRCTL 0x00000000
+#define DDR_PWRTMG 0x00400010
+#define DDR_HWLPCTL 0x00000000
+#define DDR_RFSHCTL0 0x00210000
+#define DDR_RFSHCTL3 0x00000000
+#define DDR_RFSHTMG 0x0075007D
+#define DDR_CRCPARCTL0 0x00000000
+#define DDR_DRAMTMG0 0x12182012
+#define DDR_DRAMTMG1 0x000A0419
+#define DDR_DRAMTMG2 0x0607080F
+#define DDR_DRAMTMG3 0x0050400C
+#define DDR_DRAMTMG4 0x07040507
+#define DDR_DRAMTMG5 0x05050403
+#define DDR_DRAMTMG6 0x02020002
+#define DDR_DRAMTMG7 0x00000202
+#define DDR_DRAMTMG8 0x00001005
+#define DDR_DRAMTMG14 0x000000A0
+#define DDR_ZQCTL0 0xC2000040
+#define DDR_DFITMG0 0x02050105
+#define DDR_DFITMG1 0x00000202
+#define DDR_DFILPCFG0 0x07000000
+#define DDR_DFIUPD0 0xC0400003
+#define DDR_DFIUPD1 0x00000000
+#define DDR_DFIUPD2 0x00000000
+#define DDR_DFIPHYMSTR 0x00000000
+#define DDR_ODTCFG 0x06000600
+#define DDR_ODTMAP 0x00000001
+#define DDR_SCHED 0x00000C01
+#define DDR_SCHED1 0x00000000
+#define DDR_PERFHPR1 0x01000001
+#define DDR_PERFLPR1 0x08000200
+#define DDR_PERFWR1 0x08000400
+#define DDR_DBG0 0x00000000
+#define DDR_DBG1 0x00000000
+#define DDR_DBGCMD 0x00000000
+#define DDR_POISONCFG 0x00000000
+#define DDR_PCCFG 0x00000010
+#define DDR_PCFGR_0 0x00010000
+#define DDR_PCFGW_0 0x00000000
+#define DDR_PCFGQOS0_0 0x02100C03
+#define DDR_PCFGQOS1_0 0x00800100
+#define DDR_PCFGWQOS0_0 0x01100C03
+#define DDR_PCFGWQOS1_0 0x01000200
+#define DDR_PCFGR_1 0x00010000
+#define DDR_PCFGW_1 0x00000000
+#define DDR_PCFGQOS0_1 0x02100C03
+#define DDR_PCFGQOS1_1 0x00800040
+#define DDR_PCFGWQOS0_1 0x01100C03
+#define DDR_PCFGWQOS1_1 0x01000200
+#define DDR_ADDRMAP1 0x00080808
+#define DDR_ADDRMAP2 0x00000000
+#define DDR_ADDRMAP3 0x00000000
+#define DDR_ADDRMAP4 0x00001F1F
+#define DDR_ADDRMAP5 0x07070707
+#define DDR_ADDRMAP6 0x0F0F0707
+#define DDR_ADDRMAP9 0x00000000
+#define DDR_ADDRMAP10 0x00000000
+#define DDR_ADDRMAP11 0x00000000
+#define DDR_PGCR 0x01442E02
+#define DDR_PTR0 0x00226698
+#define DDR_PTR1 0x0413A980
+#define DDR_PTR2 0x042D7700
+#define DDR_ACIOCR 0x10400812
+#define DDR_DXCCR 0x00000C40
+#define DDR_DSGCR 0xF200001F
+#define DDR_DCR 0x0000000B
+#define DDR_DTPR0 0x32B277D0
+#define DDR_DTPR1 0x097D00C0
+#define DDR_DTPR2 0x10023200
+#define DDR_MR0 0x00000830
+#define DDR_MR1 0x00000000
+#define DDR_MR2 0x00000208
+#define DDR_MR3 0x00000000
+#define DDR_ODTCR 0x00010000
+#define DDR_ZQ0CR1 0x00000038
+#define DDR_DX0GCR 0x0000CE81
+#define DDR_DX0DLLCR 0x40000000
+#define DDR_DX0DQTR 0xFFFFFFFF
+#define DDR_DX0DQSTR 0x3DB02000
+#define DDR_DX1GCR 0x0000CE81
+#define DDR_DX1DLLCR 0x40000000
+#define DDR_DX1DQTR 0xFFFFFFFF
+#define DDR_DX1DQSTR 0x3DB02000
+#define DDR_DX2GCR 0x0000CE81
+#define DDR_DX2DLLCR 0x40000000
+#define DDR_DX2DQTR 0xFFFFFFFF
+#define DDR_DX2DQSTR 0x3DB02000
+#define DDR_DX3GCR 0x0000CE81
+#define DDR_DX3DLLCR 0x40000000
+#define DDR_DX3DQTR 0xFFFFFFFF
+#define DDR_DX3DQSTR 0x3DB02000
diff --git a/fdts/stm32mp157a-icorestm32-mx.dts b/fdts/stm32mp157a-icorestm32-mx.dts
new file mode 100644
index 0000000..6954ff9
--- /dev/null
+++ b/fdts/stm32mp157a-icorestm32-mx.dts
@@ -0,0 +1,350 @@
+/* SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause) */
+/*
+ * Copyright (C) STMicroelectronics 2019 - All Rights Reserved
+ * Author: STM32CubeMX code generation for STMicroelectronics.
+ */
+
+/dts-v1/;
+#include <dt-bindings/clock/stm32mp1-clksrc.h>
+#include <dt-bindings/power/stm32mp1-power.h>
+
+#include "stm32mp15-icore-mx.h"
+
+#include "stm32mp157c.dtsi"
+#include "stm32mp157caa-pinctrl.dtsi"
+#include "stm32mp15-ddr.dtsi"
+#include "stm32mp157c-security.dtsi"
+
+/* USER CODE BEGIN includes */
+/* USER CODE END includes */
+
+/ {
+	model = "STMicroelectronics custom STM32CubeMX board";
+	compatible = "st,stm32mp157a-icorestm32-mx", "st,stm32mp157";
+
+	/* USER CODE BEGIN root */
+
+	aliases {
+		serial0 = &uart4;
+		serial1 = &usart3;
+		serial2 = &uart7;
+	};
+
+	chosen {
+		stdout-path = "serial0:115200n8";
+	};
+
+	/* USER CODE END root */
+
+clocks {
+    /* USER CODE BEGIN clocks */
+    /* USER CODE END clocks */
+
+    clk_lse: clk-lse {
+        /* USER CODE BEGIN clocks */
+        /* USER CODE END clocks */
+        st,drive=<LSEDRV_MEDIUM_HIGH>;
+    };
+    clk_hse: clk-hse {
+        /* USER CODE BEGIN clocks */
+        /* USER CODE END clocks */
+    };
+};
+
+}; /*root*/
+
+&pinctrl {
+    fmc_pins_mx: fmc_mx-0 {
+        pins1 {
+            pinmux = <STM32_PINMUX('D', 0, AF12)>, /* FMC_D2 */
+                     <STM32_PINMUX('D', 1, AF12)>, /* FMC_D3 */
+                     <STM32_PINMUX('D', 4, AF12)>, /* FMC_NOE */
+                     <STM32_PINMUX('D', 5, AF12)>, /* FMC_NWE */
+                     <STM32_PINMUX('D', 11, AF12)>, /* FMC_CLE */
+                     <STM32_PINMUX('D', 12, AF12)>, /* FMC_ALE */
+                     <STM32_PINMUX('D', 14, AF12)>, /* FMC_D0 */
+                     <STM32_PINMUX('D', 15, AF12)>, /* FMC_D1 */
+                     <STM32_PINMUX('E', 7, AF12)>, /* FMC_D4 */
+                     <STM32_PINMUX('E', 8, AF12)>, /* FMC_D5 */
+                     <STM32_PINMUX('E', 9, AF12)>, /* FMC_D6 */
+                     <STM32_PINMUX('E', 10, AF12)>, /* FMC_D7 */
+                     <STM32_PINMUX('G', 9, AF12)>; /* FMC_NCE */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <1>;
+        };
+        pins2 {
+            pinmux = <STM32_PINMUX('D', 6, AF12)>; /* FMC_NWAIT */
+            bias-disable;
+        };
+    };
+    sdmmc1_pins_mx: sdmmc1_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
+                     <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
+                     <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
+                     <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
+                     <STM32_PINMUX('C', 12, AF12)>, /* SDMMC1_CK */
+                     <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
+            bias-pull-up;
+            drive-push-pull;
+            slew-rate = <3>;
+        };
+    };
+    uart4_pins_mx: uart4_mx-0 {
+        pins1 {
+            pinmux = <STM32_PINMUX('G', 11, AF6)>; /* UART4_TX */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <1>;
+        };
+        pins2 {
+            pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <3>;
+        };
+    };
+    sdmmc2_pins_mx: sdmmc2_mx-0 {
+        pins1 {
+            pinmux = <STM32_PINMUX('A', 8, AF9)>, /* SDMMC2_D4 */
+                     <STM32_PINMUX('A', 9, AF10)>, /* SDMMC2_D5 */
+                     <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
+                     <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
+                     <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
+                     <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
+                     <STM32_PINMUX('D', 3, AF9)>, /* SDMMC2_D7 */
+                     <STM32_PINMUX('E', 5, AF9)>, /* SDMMC2_D6 */
+                     <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <1>;
+        };
+        pins2 {
+            pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <3>;
+        };
+    };
+    uart4_pins_mx: uart4_mx-0 {
+        pins1 {
+            pinmux = <STM32_PINMUX('G', 11, AF6)>; /* UART4_TX */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <0>;
+        };
+        pins2 {
+            pinmux = <STM32_PINMUX('B', 2, AF8)>; /* UART4_RX */
+            bias-disable;
+        };
+    };
+    usb_otg_hs_pins_mx: usb_otg_hs_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('A', 10, ANALOG)>; /* USB_OTG_HS_ID */
+        };
+    };
+};
+
+&rcc {
+    st,hsi-cal;
+    st,csi-cal;
+    st,cal-sec = <60>;
+    st,clksrc = <
+        CLK_MPU_PLL1P
+        CLK_AXI_HSI
+        CLK_MCU_PLL3P
+        CLK_PLL12_HSI
+        CLK_PLL3_HSI
+        CLK_PLL4_HSI
+        CLK_RTC_LSI
+        CLK_MCO1_DISABLED
+        CLK_MCO2_DISABLED
+    >;
+    st,clkdiv = <
+        1         /*MPU*/
+        0         /*AXI*/
+        0         /*MCU*/
+        1         /*APB1*/
+        1         /*APB2*/
+        1         /*APB3*/
+        0         /*APB4*/
+        0         /*APB5*/
+        0         /*RTC*/
+        0         /*MCO1*/
+        0         /*MCO2*/
+    >;
+    st,pkcs = <
+        CLK_CKPER_HSI
+        CLK_FMC_ACLK
+        CLK_ETH_PLL3Q
+        CLK_SDMMC12_HCLK6
+        CLK_STGEN_HSI
+        CLK_USBPHY_HSE
+        CLK_SPI2S1_DISABLED
+        CLK_SPI2S23_DISABLED
+        CLK_SPI45_DISABLED
+        CLK_SPI6_DISABLED
+        CLK_I2C46_CSI
+        CLK_SDMMC3_DISABLED
+        CLK_USBO_USBPHY
+        CLK_ADC_DISABLED
+        CLK_CEC_DISABLED
+        CLK_I2C12_PCLK1
+        CLK_I2C35_DISABLED
+        CLK_UART1_DISABLED
+        CLK_UART24_PCLK1
+        CLK_UART35_DISABLED
+        CLK_UART6_DISABLED
+        CLK_UART78_DISABLED
+        CLK_SPDIF_DISABLED
+        CLK_FDCAN_HSE
+        CLK_SAI1_DISABLED
+        CLK_SAI2_CKPER
+        CLK_SAI3_DISABLED
+        CLK_SAI4_DISABLED
+        CLK_LPTIM1_DISABLED
+        CLK_LPTIM23_DISABLED
+        CLK_LPTIM45_DISABLED
+    >;
+    pll1:st,pll@0 {
+        cfg = < 3 39 0 1 1 1>;
+    };
+    pll2:st,pll@1 {
+        cfg = < 3 29 1 0 0 6>;
+    };
+    pll3:st,pll@2 {
+        cfg = < 3 24 1 7 1 3>;
+    };
+    pll4:st,pll@3 {
+        cfg = < 3 24 1 4 0 2>;
+    };
+};
+
+&bsec{
+    status = "okay";
+    secure-status = "okay";
+
+    /* USER CODE BEGIN bsec */
+    /* USER CODE END bsec */
+};
+
+&etzpc{
+    st,decprot = <
+    /*"Cortex-A7 non secure" context*/
+    DECPROT(STM32MP1_ETZPC_OTG_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
+    DECPROT(STM32MP1_ETZPC_SAI2_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
+    DECPROT(STM32MP1_ETZPC_ETH_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
+    DECPROT(STM32MP1_ETZPC_TT_FDCAN_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
+    DECPROT(STM32MP1_ETZPC_UART4_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
+    DECPROT(STM32MP1_ETZPC_I2C2_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
+    DECPROT(STM32MP1_ETZPC_I2C4_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
+    DECPROT(STM32MP1_ETZPC_I2C6_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
+    DECPROT(STM32MP1_ETZPC_FMC_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
+
+    /*Restriction: following IDs are not managed - please to use User-Section if needed:
+     STM32MP1_ETZPC_DMA1_ID, STM32MP1_ETZPC_DMA2_ID, STM32MP1_ETZPC_DMAMUX_ID,
+     STM32MP1_ETZPC_SRAMx_ID, STM32MP1_ETZPC_RETRAM_ID, STM32MP1_ETZPC_BKPSRAM_ID*/
+
+    /* USER CODE BEGIN etzpc_decprot */
+     /*STM32CubeMX generates a basic and standard configuration for ETZPC.
+     Additional device configurations can be added here if needed.
+     "etzpc" node could be also overloaded in "addons" User-Section.*/
+    /* USER CODE END etzpc_decprot */
+    >;
+    secure-status = "okay";
+
+    /* USER CODE BEGIN etzpc */
+    /* USER CODE END etzpc */
+};
+
+&fmc{
+    pinctrl-names = "default";
+    pinctrl-0 = <&fmc_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN fmc */
+    /* USER CODE END fmc */
+};
+
+&rcc{
+    status = "okay";
+    secure-status = "okay";
+
+    /* USER CODE BEGIN rcc */
+    /* USER CODE END rcc */
+};
+
+&rtc{
+    status = "okay";
+    secure-status = "okay";
+
+    /* USER CODE BEGIN rtc */
+    /* USER CODE END rtc */
+};
+
+&sdmmc1{
+    pinctrl-names = "default";
+    pinctrl-0 = <&sdmmc1_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN sdmmc1 */
+    no-removable;
+    st,dirpol;
+    st,negedge;
+    bus-width=<4>;
+    /* USER CODE END sdmmc1 */
+};
+
+&sdmmc2{
+    pinctrl-names = "default";
+    pinctrl-0 = <&sdmmc2_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN sdmmc2 */
+    /* USER CODE END sdmmc2 */
+};
+
+&uart4{
+    pinctrl-names = "default";
+    pinctrl-0 = <&uart4_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN uart4 */
+    resets = <&rcc UART4_R>;
+    /* USER CODE END uart4 */
+};
+
+&usbotg_hs{
+    pinctrl-names = "default";
+    pinctrl-0 = <&usb_otg_hs_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN usbotg_hs */
+    /* USER CODE END usbotg_hs */
+};
+
+
+/* USER CODE BEGIN addons */
+&pwr {
+	system_suspend_supported_soc_modes = <
+		STM32_PM_CSLEEP_RUN
+		STM32_PM_CSTOP_ALLOW_LP_STOP
+		STM32_PM_CSTOP_ALLOW_STANDBY_DDR_SR
+	>;
+
+	system_off_soc_mode = <STM32_PM_CSTOP_ALLOW_STANDBY_DDR_OFF>;
+
+};
+
+&iwdg2{
+    status = "okay";
+    secure-status = "okay";
+
+    /* USER CODE BEGIN iwdg2 */
+    instance = <2>;
+    timeout-sec = <32>;
+    /* USER CODE END iwdg2 */
+};
+/* USER CODE END addons */
+
-- 
2.17.1

