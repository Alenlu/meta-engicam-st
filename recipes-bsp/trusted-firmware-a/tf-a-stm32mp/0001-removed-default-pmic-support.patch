From fb5c796767d3e24d23aa286fa793e88afb7a5999 Mon Sep 17 00:00:00 2001
From: frautel <francesco.utel@engicam.com>
Date: Thu, 9 Sep 2021 10:22:14 +0200
Subject: [PATCH] removed default pmic support

---
 drivers/st/pmic/stm32mp_pmic.c         | 94 +-------------------------
 plat/st/stm32mp1/sp_min/sp_min_setup.c |  4 --
 plat/st/stm32mp1/stm32mp1_def.h        |  4 +-
 3 files changed, 3 insertions(+), 99 deletions(-)

diff --git a/drivers/st/pmic/stm32mp_pmic.c b/drivers/st/pmic/stm32mp_pmic.c
index 4e505debd..b45e490ff 100644
--- a/drivers/st/pmic/stm32mp_pmic.c
+++ b/drivers/st/pmic/stm32mp_pmic.c
@@ -36,7 +36,6 @@
 #define CMD_CONFIG_LP			2U
 
 static struct i2c_handle_s i2c_handle;
-static uint32_t pmic_i2c_addr;
 
 static int dt_get_pmic_node(void *fdt)
 {
@@ -313,52 +312,6 @@ static int pmic_operate(uint8_t command, const char *node_name,
 	return ret;
 }
 
-/*
- * Get PMIC and its I2C bus configuration from the device tree.
- * Return 0 on success, negative on error, 1 if no PMIC node is defined.
- */
-static int dt_pmic_i2c_config(struct dt_node_info *i2c_info,
-			      struct stm32_i2c_init_s *init)
-{
-	static int i2c_node = -FDT_ERR_NOTFOUND;
-
-	if (i2c_node == -FDT_ERR_NOTFOUND) {
-		void *fdt;
-		int pmic_node;
-		const fdt32_t *cuint;
-
-		if (fdt_get_address(&fdt) == 0) {
-			return -FDT_ERR_NOTFOUND;
-		}
-
-		pmic_node = dt_get_pmic_node(fdt);
-		if (pmic_node < 0) {
-			return 1;
-		}
-
-		cuint = fdt_getprop(fdt, pmic_node, "reg", NULL);
-		if (cuint == NULL) {
-			return -FDT_ERR_NOTFOUND;
-		}
-
-		pmic_i2c_addr = fdt32_to_cpu(*cuint) << 1;
-		if (pmic_i2c_addr > UINT16_MAX) {
-			return -FDT_ERR_BADVALUE;
-		}
-
-		i2c_node = fdt_parent_offset(fdt, pmic_node);
-		if (i2c_node < 0) {
-			return -FDT_ERR_NOTFOUND;
-		}
-	}
-
-	dt_fill_device_info(i2c_info, i2c_node);
-	if (i2c_info->base == 0U) {
-		return -FDT_ERR_NOTFOUND;
-	}
-
-	return stm32_i2c_get_setup_from_fdt(i2c_node, init);
-}
 
 int pmic_configure_boot_on_regulators(void)
 {
@@ -422,52 +375,7 @@ int pmic_set_regulator_min_voltage(const char *regu_name)
 
 bool initialize_pmic_i2c(void)
 {
-	int ret;
-	struct dt_node_info i2c_info;
-	struct i2c_handle_s *i2c = &i2c_handle;
-	struct stm32_i2c_init_s i2c_init;
-
-	ret = dt_pmic_i2c_config(&i2c_info, &i2c_init);
-	if (ret < 0) {
-		ERROR("I2C configuration failed %d\n", ret);
-		panic();
-	}
-
-	if (ret != 0) {
-		return false;
-	}
-
-	/* Initialize PMIC I2C */
-	i2c->i2c_base_addr		= i2c_info.base;
-	i2c->dt_status			= i2c_info.status;
-	i2c->clock			= i2c_info.clock;
-	i2c->i2c_state			= I2C_STATE_RESET;
-	i2c_init.own_address1		= pmic_i2c_addr;
-	i2c_init.addressing_mode	= I2C_ADDRESSINGMODE_7BIT;
-	i2c_init.dual_address_mode	= I2C_DUALADDRESS_DISABLE;
-	i2c_init.own_address2		= 0;
-	i2c_init.own_address2_masks	= I2C_OAR2_OA2NOMASK;
-	i2c_init.general_call_mode	= I2C_GENERALCALL_DISABLE;
-	i2c_init.no_stretch_mode	= I2C_NOSTRETCH_DISABLE;
-	i2c_init.analog_filter		= 1;
-	i2c_init.digital_filter_coef	= 0;
-
-	ret = stm32_i2c_init(i2c, &i2c_init);
-	if (ret != 0) {
-		ERROR("Cannot initialize I2C %x (%d)\n",
-		      i2c->i2c_base_addr, ret);
-		panic();
-	}
-
-	if (!stm32_i2c_is_device_ready(i2c, pmic_i2c_addr, 1,
-				       I2C_TIMEOUT_BUSY_MS)) {
-		ERROR("I2C device not ready\n");
-		panic();
-	}
-
-	stpmic1_bind_i2c(i2c, (uint16_t)pmic_i2c_addr);
-
-	return true;
+	return false;
 }
 
 static void register_pmic_shared_peripherals(void)
diff --git a/plat/st/stm32mp1/sp_min/sp_min_setup.c b/plat/st/stm32mp1/sp_min/sp_min_setup.c
index 0065be44f..27fb22d42 100644
--- a/plat/st/stm32mp1/sp_min/sp_min_setup.c
+++ b/plat/st/stm32mp1/sp_min/sp_min_setup.c
@@ -537,15 +537,11 @@ void sp_min_early_platform_setup2(u_register_t arg0, u_register_t arg1,
 	}
 #endif
 
-	if (dt_pmic_status() > 0) {
-		initialize_pmic();
-	}
 
 	disable_usb_phy_regulator();
 
 	initialize_pll1_settings();
 
-	stm32mp1_init_lp_states();
 }
 
 static void init_sec_peripherals(void)
diff --git a/plat/st/stm32mp1/stm32mp1_def.h b/plat/st/stm32mp1/stm32mp1_def.h
index 027dba1bd..390fb1047 100644
--- a/plat/st/stm32mp1/stm32mp1_def.h
+++ b/plat/st/stm32mp1/stm32mp1_def.h
@@ -162,7 +162,7 @@ enum ddr_type {
 #define STM32MP_BL2_RO_SIZE		U(0x00014000)	/* 80 KB */
 #define STM32MP_BL2_SIZE		U(0x0001B000)	/* 108 KB for BL2 */
 #else
-#define STM32MP_BL2_RO_SIZE		U(0x00010000)	/* 64 KB */
+#define STM32MP_BL2_RO_SIZE		U(0x00011000)	/* 64 KB */
 #define STM32MP_BL2_SIZE		U(0x00015000)	/* 84 KB for BL2 */
 #endif
 
@@ -177,7 +177,7 @@ enum ddr_type {
 
 #define STM32MP_BL2_RW_SIZE		STM32MP_SEC_SYSRAM_BASE + \
 					STM32MP_SEC_SYSRAM_SIZE - \
-					STM32MP_BL2_RW_BASE
+					STM32MP_BL2_RW_BASE + 8192
 
 #if STM32MP_SP_MIN_IN_DDR
 #define STM32MP_BL32_SIZE		U(0x00025000)	/* 148 KB for BL32 */
