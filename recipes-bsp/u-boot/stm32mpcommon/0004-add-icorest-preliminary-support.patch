From bddd719400dd52289186c480ff8eafa3451ac604 Mon Sep 17 00:00:00 2001
From: Matteo Lisi <matteo.lisi@engicam.com>
Date: Tue, 26 Mar 2019 13:57:15 +0100
Subject: [PATCH 4/4] add icorest preliminary support

---
 arch/arm/dts/stm32mp15-icore-mx.h             | 119 +++
 .../dts/stm32mp157a-icorestm32-mx-u-boot.dtsi | 247 +++++
 arch/arm/dts/stm32mp157a-icorestm32-mx.dts    | 648 ++++++++++++
 arch/arm/dts/stm32mp157a-ugeast-mx.dts        |   4 +-
 arch/arm/mach-stm32mp/Kconfig                 |  21 +
 board/engicam-st/stm32mp1-icore/Kconfig       |  20 +
 board/engicam-st/stm32mp1-icore/MAINTAINERS   |  11 +
 board/engicam-st/stm32mp1-icore/Makefile      |  13 +
 board/engicam-st/stm32mp1-icore/README        | 342 ++++++
 board/engicam-st/stm32mp1-icore/board.c       | 177 ++++
 board/engicam-st/stm32mp1-icore/cmd_stboard.c | 145 +++
 board/engicam-st/stm32mp1-icore/extlinux.conf |  20 +
 .../stm32mp1-icore/fit_copro_kernel_dtb.its   | 103 ++
 .../stm32mp1-icore/fit_kernel_dtb.its         |  82 ++
 board/engicam-st/stm32mp1-icore/spl.c         |  45 +
 board/engicam-st/stm32mp1-icore/stm32mp1.c    | 976 ++++++++++++++++++
 configs/stm32mp15_icorest_trusted_defconfig   | 104 ++
 drivers/pinctrl/pinctrl-stmfx.c               |   3 +-
 include/configs/stm32mp1-icore.h              | 190 ++++
 19 files changed, 3266 insertions(+), 4 deletions(-)
 create mode 100644 arch/arm/dts/stm32mp15-icore-mx.h
 create mode 100644 arch/arm/dts/stm32mp157a-icorestm32-mx-u-boot.dtsi
 create mode 100644 arch/arm/dts/stm32mp157a-icorestm32-mx.dts
 create mode 100644 board/engicam-st/stm32mp1-icore/Kconfig
 create mode 100644 board/engicam-st/stm32mp1-icore/MAINTAINERS
 create mode 100644 board/engicam-st/stm32mp1-icore/Makefile
 create mode 100644 board/engicam-st/stm32mp1-icore/README
 create mode 100644 board/engicam-st/stm32mp1-icore/board.c
 create mode 100644 board/engicam-st/stm32mp1-icore/cmd_stboard.c
 create mode 100644 board/engicam-st/stm32mp1-icore/extlinux.conf
 create mode 100644 board/engicam-st/stm32mp1-icore/fit_copro_kernel_dtb.its
 create mode 100644 board/engicam-st/stm32mp1-icore/fit_kernel_dtb.its
 create mode 100644 board/engicam-st/stm32mp1-icore/spl.c
 create mode 100644 board/engicam-st/stm32mp1-icore/stm32mp1.c
 create mode 100644 configs/stm32mp15_icorest_trusted_defconfig
 create mode 100644 include/configs/stm32mp1-icore.h

diff --git a/arch/arm/dts/stm32mp15-icore-mx.h b/arch/arm/dts/stm32mp15-icore-mx.h
new file mode 100644
index 0000000..50f287f
--- /dev/null
+++ b/arch/arm/dts/stm32mp15-icore-mx.h
@@ -0,0 +1,119 @@
+/*
+ * Copyright (C) 2015-2018, STMicroelectronics - All Rights Reserved
+ *
+ * SPDX-License-Identifier:	GPL-2.0+	BSD-3-Clause
+ *
+ */
+
+/*
+ * File generated by STMicroelectronics STM32CubeMX DDR Tool for MPUs
+ * DDR type: DDR3 / DDR3L
+ * DDR width: 32bits
+ * DDR density: 4Gb
+ * System frequency: 480000Khz
+ * Relaxed Timing Mode: false
+ * Address mapping type: RBC
+ *
+ * Save Date: 2019.03.25, save Time: 11:12:22
+ */
+
+#define DDR_MEM_NAME	"DDR3-DDR3L 32bits 480000Khz"
+#define DDR_MEM_SPEED	480000
+#define DDR_MEM_SIZE	0x20000000
+
+#define DDR_MSTR 0x00040401
+#define DDR_MRCTRL0 0x00000010
+#define DDR_MRCTRL1 0x00000000
+#define DDR_DERATEEN 0x00000000
+#define DDR_DERATEINT 0x00800000
+#define DDR_PWRCTL 0x00000000
+#define DDR_PWRTMG 0x00400010
+#define DDR_HWLPCTL 0x00000000
+#define DDR_RFSHCTL0 0x00210000
+#define DDR_RFSHCTL3 0x00000000
+#define DDR_RFSHTMG 0x0075007D
+#define DDR_CRCPARCTL0 0x00000000
+#define DDR_DRAMTMG0 0x12182012
+#define DDR_DRAMTMG1 0x000A0419
+#define DDR_DRAMTMG2 0x0607080F
+#define DDR_DRAMTMG3 0x0050400C
+#define DDR_DRAMTMG4 0x07040507
+#define DDR_DRAMTMG5 0x05050403
+#define DDR_DRAMTMG6 0x02020002
+#define DDR_DRAMTMG7 0x00000202
+#define DDR_DRAMTMG8 0x00001005
+#define DDR_DRAMTMG14 0x000000A0
+#define DDR_ZQCTL0 0xC2000040
+#define DDR_DFITMG0 0x02050105
+#define DDR_DFITMG1 0x00000202
+#define DDR_DFILPCFG0 0x07000000
+#define DDR_DFIUPD0 0xC0400003
+#define DDR_DFIUPD1 0x00000000
+#define DDR_DFIUPD2 0x00000000
+#define DDR_DFIPHYMSTR 0x00000000
+#define DDR_ODTCFG 0x06000600
+#define DDR_ODTMAP 0x00000001
+#define DDR_SCHED 0x00000C01
+#define DDR_SCHED1 0x00000000
+#define DDR_PERFHPR1 0x01000001
+#define DDR_PERFLPR1 0x08000200
+#define DDR_PERFWR1 0x08000400
+#define DDR_DBG0 0x00000000
+#define DDR_DBG1 0x00000000
+#define DDR_DBGCMD 0x00000000
+#define DDR_POISONCFG 0x00000000
+#define DDR_PCCFG 0x00000010
+#define DDR_PCFGR_0 0x00010000
+#define DDR_PCFGW_0 0x00000000
+#define DDR_PCFGQOS0_0 0x02100C03
+#define DDR_PCFGQOS1_0 0x00800100
+#define DDR_PCFGWQOS0_0 0x01100C03
+#define DDR_PCFGWQOS1_0 0x01000200
+#define DDR_PCFGR_1 0x00010000
+#define DDR_PCFGW_1 0x00000000
+#define DDR_PCFGQOS0_1 0x02100C03
+#define DDR_PCFGQOS1_1 0x00800040
+#define DDR_PCFGWQOS0_1 0x01100C03
+#define DDR_PCFGWQOS1_1 0x01000200
+#define DDR_ADDRMAP1 0x00080808
+#define DDR_ADDRMAP2 0x00000000
+#define DDR_ADDRMAP3 0x00000000
+#define DDR_ADDRMAP4 0x00001F1F
+#define DDR_ADDRMAP5 0x07070707
+#define DDR_ADDRMAP6 0x0F0F0707
+#define DDR_ADDRMAP9 0x00000000
+#define DDR_ADDRMAP10 0x00000000
+#define DDR_ADDRMAP11 0x00000000
+#define DDR_PGCR 0x01442E02
+#define DDR_PTR0 0x00226698
+#define DDR_PTR1 0x0413A980
+#define DDR_PTR2 0x042D7700
+#define DDR_ACIOCR 0x10400812
+#define DDR_DXCCR 0x00000C40
+#define DDR_DSGCR 0xF200001F
+#define DDR_DCR 0x0000000B
+#define DDR_DTPR0 0x32B277D0
+#define DDR_DTPR1 0x097D00C0
+#define DDR_DTPR2 0x10023200
+#define DDR_MR0 0x00000830
+#define DDR_MR1 0x00000000
+#define DDR_MR2 0x00000208
+#define DDR_MR3 0x00000000
+#define DDR_ODTCR 0x00010000
+#define DDR_ZQ0CR1 0x00000038
+#define DDR_DX0GCR 0x0000CE81
+#define DDR_DX0DLLCR 0x40000000
+#define DDR_DX0DQTR 0xFFFFFFFF
+#define DDR_DX0DQSTR 0x3DB02000
+#define DDR_DX1GCR 0x0000CE81
+#define DDR_DX1DLLCR 0x40000000
+#define DDR_DX1DQTR 0xFFFFFFFF
+#define DDR_DX1DQSTR 0x3DB02000
+#define DDR_DX2GCR 0x0000CE81
+#define DDR_DX2DLLCR 0x40000000
+#define DDR_DX2DQTR 0xFFFFFFFF
+#define DDR_DX2DQSTR 0x3DB02000
+#define DDR_DX3GCR 0x0000CE81
+#define DDR_DX3DLLCR 0x40000000
+#define DDR_DX3DQTR 0xFFFFFFFF
+#define DDR_DX3DQSTR 0x3DB02000
diff --git a/arch/arm/dts/stm32mp157a-icorestm32-mx-u-boot.dtsi b/arch/arm/dts/stm32mp157a-icorestm32-mx-u-boot.dtsi
new file mode 100644
index 0000000..613e3af
--- /dev/null
+++ b/arch/arm/dts/stm32mp157a-icorestm32-mx-u-boot.dtsi
@@ -0,0 +1,247 @@
+/* SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause*/
+/*
+ * Copyright (C) 2019, STMicroelectronics - All Rights Reserved
+ * Author: STM32CubeMX code generation for STMicroelectronics.
+ */
+
+#include <dt-bindings/clock/stm32mp1-clksrc.h>
+#include "stm32mp15-mx.h"
+
+#include "stm32mp157-u-boot.dtsi"
+#include "stm32mp15-ddr.dtsi"
+
+/* USER CODE BEGIN includes */
+/* USER CODE END includes */
+
+/ {
+
+	/* USER CODE BEGIN root */
+	/* USER CODE END root */
+
+clocks {
+    /* USER CODE BEGIN clocks */
+    /* USER CODE END clocks */
+
+    clk_lsi: clk-lsi {
+        /* USER CODE BEGIN clocks */
+        /* USER CODE END clocks */
+        u-boot,dm-pre-reloc;
+    };
+    clk_hsi: clk-hsi {
+        /* USER CODE BEGIN clocks */
+        /* USER CODE END clocks */
+        u-boot,dm-pre-reloc;
+    };
+    clk_csi: clk-csi {
+        /* USER CODE BEGIN clocks */
+        /* USER CODE END clocks */
+        u-boot,dm-pre-reloc;
+    };
+    clk_hse: clk-hse {
+        /* USER CODE BEGIN clocks */
+        /* USER CODE END clocks */
+        u-boot,dm-pre-reloc;
+    };
+};
+
+}; /*root*/
+
+&gpioa {
+    compatible = "st,stm32-gpio";
+    u-boot,dm-pre-reloc;
+};
+&gpiob {
+    compatible = "st,stm32-gpio";
+    u-boot,dm-pre-reloc;
+};
+&gpioc {
+    compatible = "st,stm32-gpio";
+    u-boot,dm-pre-reloc;
+};
+&gpiod {
+    compatible = "st,stm32-gpio";
+    u-boot,dm-pre-reloc;
+};
+&gpioe {
+    compatible = "st,stm32-gpio";
+    u-boot,dm-pre-reloc;
+};
+&gpiof {
+    compatible = "st,stm32-gpio";
+    u-boot,dm-pre-reloc;
+};
+&gpiog {
+    compatible = "st,stm32-gpio";
+    u-boot,dm-pre-reloc;
+};
+&gpioh {
+    compatible = "st,stm32-gpio";
+    u-boot,dm-pre-reloc;
+};
+&gpioi {
+    compatible = "st,stm32-gpio";
+    u-boot,dm-pre-reloc;
+};
+&gpioj {
+    compatible = "st,stm32-gpio";
+    u-boot,dm-pre-reloc;
+};
+&gpiok {
+    compatible = "st,stm32-gpio";
+    u-boot,dm-pre-reloc;
+};
+&gpioz {
+    compatible = "st,stm32-gpio";
+    u-boot,dm-pre-reloc;
+};
+
+&rcc {
+    u-boot,dm-pre-reloc;
+    st,clksrc = <
+        CLK_MPU_PLL1P
+        CLK_AXI_HSI
+        CLK_MCU_PLL3P
+        CLK_PLL12_HSI
+        CLK_PLL3_HSI
+        CLK_PLL4_HSI
+        CLK_RTC_LSI
+        CLK_MCO1_DISABLED
+        CLK_MCO2_DISABLED
+    >;
+    st,clkdiv = <
+        1         /*MPU*/
+        0         /*AXI*/
+        0         /*MCU*/
+        1         /*APB1*/
+        1         /*APB2*/
+        1         /*APB3*/
+        0         /*APB4*/
+        0         /*APB5*/
+        0         /*RTC*/
+        0         /*MCO1*/
+        0         /*MCO2*/
+    >;
+    st,pkcs = <
+        CLK_CKPER_HSI
+        CLK_FMC_ACLK
+        CLK_ETH_PLL3Q
+        CLK_SDMMC12_HCLK6
+        CLK_STGEN_HSI
+        CLK_USBPHY_HSE
+        CLK_SPI2S1_DISABLED
+        CLK_SPI2S23_DISABLED
+        CLK_SPI45_DISABLED
+        CLK_SPI6_DISABLED
+        CLK_I2C46_CSI
+        CLK_SDMMC3_DISABLED
+        CLK_USBO_USBPHY
+        CLK_ADC_DISABLED
+        CLK_CEC_DISABLED
+        CLK_I2C12_PCLK1
+        CLK_I2C35_DISABLED
+        CLK_UART1_DISABLED
+        CLK_UART24_PCLK1
+        CLK_UART35_DISABLED
+        CLK_UART6_DISABLED
+        CLK_UART78_DISABLED
+        CLK_SPDIF_DISABLED
+        CLK_FDCAN_HSE
+        CLK_SAI1_DISABLED
+        CLK_SAI2_CKPER
+        CLK_SAI3_DISABLED
+        CLK_SAI4_DISABLED
+        CLK_LPTIM1_DISABLED
+        CLK_LPTIM23_DISABLED
+        CLK_LPTIM45_DISABLED
+    >;
+    pll1:st,pll@0 {
+        cfg = < 3 39 0 1 1 1>;
+        u-boot,dm-pre-reloc;
+    };
+    pll2:st,pll@1 {
+        cfg = < 3 29 1 0 0 6>;
+        u-boot,dm-pre-reloc;
+    };
+    pll3:st,pll@2 {
+        cfg = < 3 24 1 7 1 3>;
+        u-boot,dm-pre-reloc;
+    };
+    pll4:st,pll@3 {
+        cfg = < 3 24 1 4 0 2>;
+        u-boot,dm-pre-reloc;
+    };
+};
+
+&fmc{
+    u-boot,dm-pre-reloc;
+
+    /* USER CODE BEGIN fmc */
+    /* USER CODE END fmc */
+};
+
+&ltdc{
+    u-boot,dm-pre-reloc;
+
+    /* USER CODE BEGIN ltdc */
+    /* USER CODE END ltdc */
+};
+
+&rcc{
+    u-boot,dm-pre-reloc;
+
+    /* USER CODE BEGIN rcc */
+    /* USER CODE END rcc */
+};
+
+&sdmmc1{
+    u-boot,dm-pre-reloc;
+
+    /* USER CODE BEGIN sdmmc1 */
+    /* USER CODE END sdmmc1 */
+};
+
+&sdmmc2{
+    u-boot,dm-pre-reloc;
+
+    /* USER CODE BEGIN sdmmc2 */
+    /* USER CODE END sdmmc2 */
+};
+
+&uart4{
+    u-boot,dm-pre-reloc;
+
+    /* USER CODE BEGIN uart4 */
+    /* USER CODE END uart4 */
+};
+
+&usbotg_hs{
+    u-boot,dm-pre-reloc;
+
+    /* USER CODE BEGIN usbotg_hs */
+    /* USER CODE END usbotg_hs */
+};
+
+&usbphyc{
+    u-boot,dm-pre-reloc;
+
+    /* USER CODE BEGIN usbphyc */
+    /* USER CODE END usbphyc */
+};
+
+&usbphyc_port0{
+    u-boot,dm-pre-reloc;
+
+    /* USER CODE BEGIN usbphyc_port0 */
+    /* USER CODE END usbphyc_port0 */
+};
+
+&usbphyc_port1{
+    u-boot,dm-pre-reloc;
+
+    /* USER CODE BEGIN usbphyc_port1 */
+    /* USER CODE END usbphyc_port1 */
+};
+
+/* USER CODE BEGIN addons */
+/* USER CODE END addons */
+
diff --git a/arch/arm/dts/stm32mp157a-icorestm32-mx.dts b/arch/arm/dts/stm32mp157a-icorestm32-mx.dts
new file mode 100644
index 0000000..ecec359
--- /dev/null
+++ b/arch/arm/dts/stm32mp157a-icorestm32-mx.dts
@@ -0,0 +1,648 @@
+/* SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause) */
+/*
+ * Copyright (C) STMicroelectronics 2019 - All Rights Reserved
+ * Author: STM32CubeMX code generation for STMicroelectronics.
+ */
+
+/dts-v1/;
+#include "stm32mp157c.dtsi"
+#include "stm32mp157c-m4-srm.dtsi"
+#include "stm32mp157caa-pinctrl.dtsi"
+#include <dt-bindings/gpio/gpio.h>
+
+/* USER CODE BEGIN includes */
+/* USER CODE END includes */
+
+/ {
+	model = "STMicroelectronics custom STM32CubeMX board";
+	compatible = "st,stm32mp157a-icorestm32-mx", "st,stm32mp157";
+#if 0
+    config {
+            st,reset-phy-gpios = <&gpiod 10 GPIO_ACTIVE_LOW>;
+    };
+#endif
+    memory@c0000000 {
+        reg = <0xc0000000 0x20000000>;
+
+        /* USER CODE BEGIN memory */
+        /* USER CODE END memory */
+    };
+
+    reserved-memory {
+        #address-cells = <1>;
+        #size-cells = <1>;
+        ranges;
+
+        /* USER CODE BEGIN reserved-memory */
+        /* USER CODE END reserved-memory */
+
+        gpu_reserved: gpu@dc000000 {
+            reg = <0xdc000000 0x4000000>;
+            no-map;
+        };
+    };
+
+	/* USER CODE BEGIN root */
+    aliases {
+		ethernet0 = &ethernet0;
+		serial0 = &uart4;
+	};
+
+	chosen {
+		stdout-path = "serial0:115200n8";
+	};
+	/* USER CODE END root */
+
+    clocks {
+        /* USER CODE BEGIN clocks */
+        /* USER CODE END clocks */
+
+        clk_lsi: clk-lsi {
+            clock-frequency = <32000>;
+        };
+        clk_hsi: clk-hsi {
+            clock-frequency = <64000000>;
+        };
+        clk_csi: clk-csi {
+            clock-frequency = <4000000>;
+        };
+        clk_hse: clk-hse {
+            clock-frequency = <24000000>;
+        };
+    };
+
+}; /*root*/
+
+&pinctrl {
+    u-boot,dm-pre-reloc;
+    eth1_pins_mx: eth1_mx-0 {
+				pins-1 {
+					pinmux =  <STM32_PINMUX('A', 1, AF0)>, /* ETH_CLK */
+						 <STM32_PINMUX('A', 2, AF11)>, /* ETH_MDIO */
+						 <STM32_PINMUX('C', 1, AF11)>, /* ETH_MDC */
+						 <STM32_PINMUX('A', 7, AF11)>, /* ETH_RX_DV */
+						 <STM32_PINMUX('B', 11, AF11)>, /* ETH_TX_EN */
+						 <STM32_PINMUX('C', 4, AF11)>, /* ETH_RX_D0 */
+						 <STM32_PINMUX('C', 5, AF11)>, /* ETH_RX_D1 */
+						 <STM32_PINMUX('G', 13, AF11)>, /* ETH_TX_D0 */
+						 <STM32_PINMUX('G', 14, AF11)>, /* ETH_TX_D1 */						 
+						 <STM32_PINMUX('D', 10, GPIO)>;
+					bias-disable;
+					drive-push-pull;
+					slew-rate = <3>;
+				};
+				pins-2 {
+                    pinmux = <STM32_PINMUX('D', 10, GPIO)>;
+                    bias-pull-up;
+                    drive-push-pull;
+                    output-low;
+                    slew-rate = <0>;				
+				};
+    };
+
+    fdcan1_pins_mx: fdcan1_mx-0 {
+        pins1 {
+            pinmux = <STM32_PINMUX('H', 13, AF9)>; /* FDCAN1_TX */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <0>;
+        };
+        pins2 {
+            pinmux = <STM32_PINMUX('H', 14, AF9)>; /* FDCAN1_RX */
+            bias-disable;
+        };
+    };
+    fmc_pins_mx: fmc_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins1 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('D', 0, AF12)>, /* FMC_D2 */
+                     <STM32_PINMUX('D', 1, AF12)>, /* FMC_D3 */
+                     <STM32_PINMUX('D', 4, AF12)>, /* FMC_NOE */
+                     <STM32_PINMUX('D', 5, AF12)>, /* FMC_NWE */
+                     <STM32_PINMUX('D', 11, AF12)>, /* FMC_CLE */
+                     <STM32_PINMUX('D', 12, AF12)>, /* FMC_ALE */
+                     <STM32_PINMUX('D', 14, AF12)>, /* FMC_D0 */
+                     <STM32_PINMUX('D', 15, AF12)>, /* FMC_D1 */
+                     <STM32_PINMUX('E', 7, AF12)>, /* FMC_D4 */
+                     <STM32_PINMUX('E', 8, AF12)>, /* FMC_D5 */
+                     <STM32_PINMUX('E', 9, AF12)>, /* FMC_D6 */
+                     <STM32_PINMUX('E', 10, AF12)>, /* FMC_D7 */
+                     <STM32_PINMUX('G', 9, AF12)>; /* FMC_NCE */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <1>;
+        };
+        pins2 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('D', 6, AF12)>; /* FMC_NWAIT */
+            bias-disable;
+        };
+    };
+    i2c2_pins_mx: i2c2_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('H', 4, AF4)>, /* I2C2_SCL */
+                     <STM32_PINMUX('H', 5, AF4)>; /* I2C2_SDA */
+            bias-disable;
+            drive-open-drain;
+            slew-rate = <0>;
+        };
+    };
+    i2c4_pins_mx: i2c4_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('H', 11, AF4)>, /* I2C4_SCL */
+                     <STM32_PINMUX('H', 12, AF4)>; /* I2C4_SDA */
+            bias-disable;
+            drive-open-drain;
+            slew-rate = <0>;
+        };
+    };
+    sai2a_pins_mx: sai2a_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('E', 0, AF10)>, /* SAI2_MCLK_A */
+                     <STM32_PINMUX('I', 5, AF10)>, /* SAI2_SCK_A */
+                     <STM32_PINMUX('I', 6, AF10)>, /* SAI2_SD_A */
+                     <STM32_PINMUX('I', 7, AF10)>; /* SAI2_FS_A */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <0>;
+        };
+    };
+    sai2b_pins_mx: sai2b_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('C', 0, AF8)>, /* SAI2_FS_B */
+                     <STM32_PINMUX('E', 6, AF10)>, /* SAI2_MCLK_B */
+                     <STM32_PINMUX('F', 11, AF10)>, /* SAI2_SD_B */
+                     <STM32_PINMUX('H', 2, AF10)>; /* SAI2_SCK_B */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <0>;
+        };
+    };
+    sdmmc1_pins_mx: sdmmc1_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins1 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
+                     <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
+                     <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
+                     <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
+                     <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <1>;
+        };
+        pins2 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <3>;
+        };
+    };
+    sdmmc2_pins_mx: sdmmc2_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins1 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('A', 8, AF9)>, /* SDMMC2_D4 */
+                     <STM32_PINMUX('A', 9, AF10)>, /* SDMMC2_D5 */
+                     <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
+                     <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
+                     <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
+                     <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
+                     <STM32_PINMUX('D', 3, AF9)>, /* SDMMC2_D7 */
+                     <STM32_PINMUX('E', 5, AF9)>, /* SDMMC2_D6 */
+                     <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <1>;
+        };
+        pins2 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <3>;
+        };
+    };
+    uart4_pins_mx: uart4_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins1 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('G', 11, AF6)>, /* UART4_TX */
+                     <STM32_PINMUX('D', 10, GPIO)>;
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <0>;
+        };
+        pins2 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('B', 2, AF8)>; /* UART4_RX */
+            bias-disable;
+        };
+    };
+    eth1_sleep_pins_mx: eth1_sleep_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ETH1_CLK */
+                     <STM32_PINMUX('A', 2, ANALOG)>, /* ETH1_MDIO */
+                     <STM32_PINMUX('A', 7, ANALOG)>, /* ETH1_CRS_DV */
+                     <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_EN */
+                     <STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_MDC */
+                     <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
+                     <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
+                     <STM32_PINMUX('G', 8, ANALOG)>, /* ETH1_PPS_OUT */
+                     <STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
+                     <STM32_PINMUX('G', 14, ANALOG)>; /* ETH1_TXD1 */
+        };
+    };
+    fdcan1_sleep_pins_mx: fdcan1_sleep_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('H', 13, ANALOG)>, /* FDCAN1_TX */
+                     <STM32_PINMUX('H', 14, ANALOG)>; /* FDCAN1_RX */
+        };
+    };
+    fmc_sleep_pins_mx: fmc_sleep_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('D', 0, ANALOG)>, /* FMC_D2 */
+                     <STM32_PINMUX('D', 1, ANALOG)>, /* FMC_D3 */
+                     <STM32_PINMUX('D', 4, ANALOG)>, /* FMC_NOE */
+                     <STM32_PINMUX('D', 5, ANALOG)>, /* FMC_NWE */
+                     <STM32_PINMUX('D', 6, ANALOG)>, /* FMC_NWAIT */
+                     <STM32_PINMUX('D', 11, ANALOG)>, /* FMC_CLE */
+                     <STM32_PINMUX('D', 12, ANALOG)>, /* FMC_ALE */
+                     <STM32_PINMUX('D', 14, ANALOG)>, /* FMC_D0 */
+                     <STM32_PINMUX('D', 15, ANALOG)>, /* FMC_D1 */
+                     <STM32_PINMUX('E', 7, ANALOG)>, /* FMC_D4 */
+                     <STM32_PINMUX('E', 8, ANALOG)>, /* FMC_D5 */
+                     <STM32_PINMUX('E', 9, ANALOG)>, /* FMC_D6 */
+                     <STM32_PINMUX('E', 10, ANALOG)>, /* FMC_D7 */
+                     <STM32_PINMUX('G', 9, ANALOG)>; /* FMC_NCE */
+        };
+    };
+    i2c2_sleep_pins_mx: i2c2_sleep_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('H', 4, ANALOG)>, /* I2C2_SCL */
+                     <STM32_PINMUX('H', 5, ANALOG)>; /* I2C2_SDA */
+        };
+    };
+    i2c4_sleep_pins_mx: i2c4_sleep_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('H', 11, ANALOG)>, /* I2C4_SCL */
+                     <STM32_PINMUX('H', 12, ANALOG)>; /* I2C4_SDA */
+        };
+    };
+    sai2a_sleep_pins_mx: sai2a_sleep_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('E', 0, ANALOG)>, /* SAI2_MCLK_A */
+                     <STM32_PINMUX('I', 5, ANALOG)>, /* SAI2_SCK_A */
+                     <STM32_PINMUX('I', 6, ANALOG)>, /* SAI2_SD_A */
+                     <STM32_PINMUX('I', 7, ANALOG)>; /* SAI2_FS_A */
+        };
+    };
+    sai2b_sleep_pins_mx: sai2b_sleep_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('C', 0, ANALOG)>, /* SAI2_FS_B */
+                     <STM32_PINMUX('E', 6, ANALOG)>, /* SAI2_MCLK_B */
+                     <STM32_PINMUX('F', 11, ANALOG)>, /* SAI2_SD_B */
+                     <STM32_PINMUX('H', 2, ANALOG)>; /* SAI2_SCK_B */
+        };
+    };
+    sdmmc1_sleep_pins_mx: sdmmc1_sleep_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* SDMMC1_D0 */
+                     <STM32_PINMUX('C', 9, ANALOG)>, /* SDMMC1_D1 */
+                     <STM32_PINMUX('C', 10, ANALOG)>, /* SDMMC1_D2 */
+                     <STM32_PINMUX('C', 11, ANALOG)>, /* SDMMC1_D3 */
+                     <STM32_PINMUX('C', 12, ANALOG)>, /* SDMMC1_CK */
+                     <STM32_PINMUX('D', 2, ANALOG)>; /* SDMMC1_CMD */
+        };
+    };
+    sdmmc2_sleep_pins_mx: sdmmc2_sleep_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('A', 8, ANALOG)>, /* SDMMC2_D4 */
+                     <STM32_PINMUX('A', 9, ANALOG)>, /* SDMMC2_D5 */
+                     <STM32_PINMUX('B', 3, ANALOG)>, /* SDMMC2_D2 */
+                     <STM32_PINMUX('B', 4, ANALOG)>, /* SDMMC2_D3 */
+                     <STM32_PINMUX('B', 14, ANALOG)>, /* SDMMC2_D0 */
+                     <STM32_PINMUX('B', 15, ANALOG)>, /* SDMMC2_D1 */
+                     <STM32_PINMUX('D', 3, ANALOG)>, /* SDMMC2_D7 */
+                     <STM32_PINMUX('E', 3, ANALOG)>, /* SDMMC2_CK */
+                     <STM32_PINMUX('E', 5, ANALOG)>, /* SDMMC2_D6 */
+                     <STM32_PINMUX('G', 6, ANALOG)>; /* SDMMC2_CMD */
+        };
+    };
+    uart4_sleep_pins_mx: uart4_sleep_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('B', 14, ANALOG)>, /* USART1_TX */
+                     <STM32_PINMUX('B', 15, ANALOG)>; /* USART1_RX */
+        };
+    };
+};
+&pinctrl_z {
+    u-boot,dm-pre-reloc;
+    i2c6_pins_z_mx: i2c6_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('Z', 3, AF2)>, /* I2C6_SDA */
+                     <STM32_PINMUX('Z', 4, AF2)>; /* I2C6_SCL */
+            bias-disable;
+            drive-open-drain;
+            slew-rate = <0>;
+        };
+    };
+    i2c6_sleep_pins_z_mx: i2c6_sleep_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('Z', 3, ANALOG)>, /* I2C6_SDA */
+                     <STM32_PINMUX('Z', 4, ANALOG)>; /* I2C6_SCL */
+        };
+    };
+};
+
+&m4_rproc{
+    recovery;
+    status = "okay";
+
+    /* USER CODE BEGIN m4_rproc */
+    /* USER CODE END m4_rproc */
+};
+
+&bsec{
+    status = "okay";
+
+    /* USER CODE BEGIN bsec */
+    /* USER CODE END bsec */
+};
+
+
+&fmc{
+    u-boot,dm-pre-reloc;
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&fmc_pins_mx>;
+    pinctrl-1 = <&fmc_sleep_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN fmc */
+    /* USER CODE END fmc */
+};
+
+&gpu{
+    status = "okay";
+
+    /* USER CODE BEGIN gpu */
+    /* USER CODE END gpu */
+};
+
+&i2c2{
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&i2c2_pins_mx>;
+    pinctrl-1 = <&i2c2_sleep_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN i2c2 */
+    /* USER CODE END i2c2 */
+};
+
+&i2c4{
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&i2c4_pins_mx>;
+    pinctrl-1 = <&i2c4_sleep_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN i2c4 */
+    /* USER CODE END i2c4 */
+};
+
+&i2c6{
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&i2c6_pins_z_mx>;
+    pinctrl-1 = <&i2c6_sleep_pins_z_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN i2c6 */
+    /* USER CODE END i2c6 */
+};
+
+&ltdc{
+    u-boot,dm-pre-reloc;
+    status = "disabled";
+
+    /* USER CODE BEGIN ltdc */
+    /* USER CODE END ltdc */
+};
+
+&m_can1{
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&fdcan1_pins_mx>;
+    pinctrl-1 = <&fdcan1_sleep_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN m_can1 */
+    /* USER CODE END m_can1 */
+};
+
+&rcc{
+    u-boot,dm-pre-reloc;
+    status = "okay";
+
+    /* USER CODE BEGIN rcc */
+    /* USER CODE END rcc */
+};
+
+&rtc{
+    status = "okay";
+
+    /* USER CODE BEGIN rtc */
+    /* USER CODE END rtc */
+};
+
+&sai2{
+    status = "okay";
+
+    /* USER CODE BEGIN sai2 */
+    /* USER CODE END sai2 */
+
+    sai2a:audio-controller@4400b004{
+        pinctrl-names = "default", "sleep";
+        pinctrl-0 = <&sai2a_pins_mx>;
+        pinctrl-1 = <&sai2a_sleep_pins_mx>;
+        status = "okay";
+
+        /* USER CODE BEGIN sai2a */
+        /* USER CODE END sai2a */
+    };
+
+    sai2b:audio-controller@4400b024{
+        pinctrl-names = "default", "sleep";
+        pinctrl-0 = <&sai2b_pins_mx>;
+        pinctrl-1 = <&sai2b_sleep_pins_mx>;
+        status = "okay";
+
+        /* USER CODE BEGIN sai2b */
+        /* USER CODE END sai2b */
+    };
+};
+
+&sdmmc1{
+    u-boot,dm-pre-reloc;
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&sdmmc1_pins_mx>;
+    pinctrl-1 = <&sdmmc1_sleep_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN sdmmc1 */
+    no-removable;
+    st,dirpol;
+    st,negedge;
+    bus-width=<4>;
+    /* USER CODE END sdmmc1 */
+};
+
+&sdmmc2{
+    u-boot,dm-pre-reloc;
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&sdmmc2_pins_mx>;
+    pinctrl-1 = <&sdmmc2_sleep_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN sdmmc2 */
+    /* USER CODE END sdmmc2 */
+};
+
+&uart4{
+    u-boot,dm-pre-reloc;
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&uart4_pins_mx>;
+    pinctrl-1 = <&uart4_sleep_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN uart4 */
+    /* USER CODE END uart4 */
+};
+
+&usbh_ehci{
+    status = "okay";
+
+    /* USER CODE BEGIN usbh_ehci */
+   	phy-names = "usb";
+	phys = <&usbphyc_port0>;
+
+    /* USER CODE END usbh_ehci */
+};
+
+&usbh_ohci{
+    status = "okay";
+
+    /* USER CODE BEGIN usbh_ohci */
+    /* USER CODE END usbh_ohci */
+};
+
+
+&usbphyc{
+    status = "okay";
+
+    /* USER CODE BEGIN usbphyc */
+    /* USER CODE END usbphyc */
+};
+
+&usbphyc_port0{
+    status = "okay";
+
+    /* USER CODE BEGIN usbphyc_port0 */
+    /* USER CODE END usbphyc_port0 */
+};
+
+&usbphyc_port1{
+    status = "okay";
+
+    /* USER CODE BEGIN usbphyc_port1 */
+    /* USER CODE END usbphyc_port1 */
+};
+
+/* USER CODE BEGIN addons */
+
+&iwdg2{
+    status = "okay";
+    secure-status = "okay";
+
+    /* USER CODE BEGIN iwdg2 */
+    instance = <2>;
+    timeout-sec = <32>;
+    /* USER CODE END iwdg2 */
+};
+
+&fmc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&fmc_pins_a>;
+	status = "okay";
+	#address-cells = <1>;
+	#size-cells = <0>;
+
+	nand: nand@0 {
+		reg = <0>;
+		nand-on-flash-bbt;
+		#address-cells = <1>;
+		#size-cells = <1>;
+		
+        partition@0 {
+            label = "nand-boot";
+            reg = <0x00000000 0x01400000>;
+        };
+
+        partition@1400000 {
+            label = "nand-fs";
+            reg = <0x01400000 0x1e000000>;
+        };
+	};
+};
+
+
+&ethernet0{
+    u-boot,dm-pre-reloc;
+    pinctrl-names = "default";
+    pinctrl-0 = <&eth1_pins_mx>;
+    status = "okay";
+ 	phy-mode = "rmii";
+	max-speed = <100>;
+	phy-handle = <&phy0>;
+	snps,ps-speed = <100>;
+    st,eth_ref_clk_sel;
+
+   clock-names = "stmmaceth",
+                "mac-clk-tx",
+                "mac-clk-rx",
+                "ethstp",
+                "syscfg-clk",
+                "eth-ck";
+
+    clocks = <&rcc ETHMAC>,
+            <&rcc ETHTX>,
+            <&rcc ETHRX>,
+            <&rcc ETHSTP>,
+            <&rcc SYSCFG>,
+            <&rcc ETHCK>;
+
+    mdio0 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		compatible = "snps,dwmac-mdio";
+		snps,reset-gpio = <&gpiod 10 GPIO_ACTIVE_LOW>;
+		snps,reset-delays-us = <25>;
+		snps,reset-active-low;
+		phy0: ethernet-phy-0 {
+			reg = <0>;
+		};
+	};
+
+};
+
+
+/* USER CODE END addons */
+
diff --git a/arch/arm/dts/stm32mp157a-ugeast-mx.dts b/arch/arm/dts/stm32mp157a-ugeast-mx.dts
index 840f617..8089083 100644
--- a/arch/arm/dts/stm32mp157a-ugeast-mx.dts
+++ b/arch/arm/dts/stm32mp157a-ugeast-mx.dts
@@ -749,14 +749,14 @@
 
 &ethernet0 {
     pinctrl-names = "default";
-    pinctrl-0 = <&eth1_pins_mx  &eth_res>;
+    pinctrl-0 = <&eth1_pins_mx>;
 	phy-mode = "rmii";
 	max-speed = <100>;
 	phy-handle = <&phy0>;
 	snps,ps-speed = <100>;
     st,eth_ref_clk_sel;
 	status = "okay";
-    
+
     clock-names = "stmmaceth",
                 "mac-clk-tx",
                 "mac-clk-rx",
diff --git a/arch/arm/mach-stm32mp/Kconfig b/arch/arm/mach-stm32mp/Kconfig
index 0cf65b3..7bf0d21 100644
--- a/arch/arm/mach-stm32mp/Kconfig
+++ b/arch/arm/mach-stm32mp/Kconfig
@@ -47,6 +47,26 @@ config TARGET_UGEA_STM32MP1
 		STMicroelectronics MPU with core ARMv7
 		dual core A7 for STM32MP153, monocore for STM32MP151
 
+config TARGET_ICORE_STM32MP1
+        bool "Support stm32mp1xx-iCore"
+        select ARCH_SUPPORT_PSCI if !STM32MP1_TRUSTED
+        select CPU_V7A
+        select CPU_V7_HAS_NONSEC if !STM32MP1_TRUSTED
+        select CPU_V7_HAS_VIRT
+        select OF_BOARD_SETUP
+        select PINCTRL_STM32
+        select STM32_RCC
+        select STM32_RESET
+        select STM32_SERIAL
+        imply BOOTCOUNT_LIMIT
+        imply SYSRESET_PSCI if STM32MP1_TRUSTED
+        imply SYSRESET_SYSCON if !STM32MP1_TRUSTED
+        help
+                target STMicroelectronics SOC STM32MP1 family
+                STM32MP153 or STM32MP151
+                STMicroelectronics MPU with core ARMv7
+                dual core A7 for STM32MP153, monocore for STM32MP151
+
 	
 config TARGET_STM32MP1
 	bool "Support stm32mp1xx"
@@ -119,6 +139,7 @@ config STM32_ETZPC
 
 source "board/st/stm32mp1/Kconfig"
 source "board/engicam-st/stm32mp1-ugea/Kconfig"
+source "board/engicam-st/stm32mp1-icore/Kconfig"
 
 config CMD_STM32PROG
 	bool "command stm32prog for STM32CudeProgrammer"
diff --git a/board/engicam-st/stm32mp1-icore/Kconfig b/board/engicam-st/stm32mp1-icore/Kconfig
new file mode 100644
index 0000000..1211087
--- /dev/null
+++ b/board/engicam-st/stm32mp1-icore/Kconfig
@@ -0,0 +1,20 @@
+if TARGET_ICORE_STM32MP1
+
+config SYS_BOARD
+	default "stm32mp1-icore"
+
+config SYS_VENDOR
+	default "engicam-st"
+
+config SYS_CONFIG_NAME
+	default "stm32mp1-icore"
+
+config CMD_STBOARD
+	bool "stboard - command for OTP board information"
+	default y
+	help
+	  This compile the stboard command to
+	  read and write the board in the OTP.
+
+endif
+ 
diff --git a/board/engicam-st/stm32mp1-icore/MAINTAINERS b/board/engicam-st/stm32mp1-icore/MAINTAINERS
new file mode 100644
index 0000000..6c9710a
--- /dev/null
+++ b/board/engicam-st/stm32mp1-icore/MAINTAINERS
@@ -0,0 +1,11 @@
+STM32MP1 BOARD
+M:	Patrick Delaunay <patrick.delaunay@st.com>
+M:	Christophe Kerello <christophe.kerello@st.com>
+L:	uboot-stm32@st-md-mailman.stormreply.com (moderated for non-subscribers)
+S:	Maintained
+F:	arch/arm/dts/stm32mp157*
+F:	board/st/stm32mp1
+F:	configs/stm32mp15_trusted_defconfig
+F:	configs/stm32mp15_optee_defconfig
+F:	configs/stm32mp15_basic_defconfig
+F:	include/configs/stm32mp1.h
diff --git a/board/engicam-st/stm32mp1-icore/Makefile b/board/engicam-st/stm32mp1-icore/Makefile
new file mode 100644
index 0000000..3c6c035
--- /dev/null
+++ b/board/engicam-st/stm32mp1-icore/Makefile
@@ -0,0 +1,13 @@
+# SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+#
+# Copyright (C) 2018, STMicroelectronics - All Rights Reserved
+#
+
+ifdef CONFIG_SPL_BUILD
+obj-y += spl.o
+else
+obj-y += stm32mp1.o
+obj-$(CONFIG_CMD_STBOARD) += cmd_stboard.o
+endif
+
+obj-y += board.o
diff --git a/board/engicam-st/stm32mp1-icore/README b/board/engicam-st/stm32mp1-icore/README
new file mode 100644
index 0000000..4ebcfb4
--- /dev/null
+++ b/board/engicam-st/stm32mp1-icore/README
@@ -0,0 +1,342 @@
+SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+#
+# Copyright (C) 2018 STMicroelectronics - All Rights Reserved
+#
+
+U-Boot on STMicroelectronics STM32MP1
+======================================
+
+1. Summary
+==========
+This is a quick instruction for setup stm32mp1 boards.
+
+2. Supported devices
+====================
+U-Boot supports one STMP32MP1 SoCs: STM32MP157
+
+The STM32MP157 is a Cortex-A MPU aimed at various applications.
+It features:
+- Dual core Cortex-A7 application core
+- 2D/3D image composition with GPU
+- Standard memories interface support
+- Standard connectivity, widely inherited from the STM32 MCU family
+- Comprehensive security support
+
+Everything is supported in Linux but U-Boot is limited to:
+1. UART
+2. SDCard/MMC controller (SDMMC)
+3. NAND controller (FMC)
+4. NOR controller (QSPI)
+5. USB controller (OTG DWC2)
+
+And the necessary drivers
+1. I2C
+2. STPMIC1 (PMIC and regulator)
+3. Clock, Reset, Sysreset
+4. Fuse
+
+Currently the following boards are supported:
++ stm32mp157c-ev1
++ stm32mp157c-ed1
++ stm32mp157a-dk1
++ stm32mp157c-dk2
+
+3. Boot Sequences
+=================
+
+BootRom => FSBL in SYSRAM => SSBL in DDR => OS (Linux Kernel)
+
+with FSBL = First Stage Bootloader
+     SSBL = Second Stage Bootloader
+
+2 boot configurations are supported:
+
+1) The "Trusted" boot chain (defconfig_file : stm32mp15_trusted_defconfig)
+   BootRom => FSBL = Trusted Firmware-A (TF-A) => SSBL = U-Boot
+   TF-A performs a full initialization of Secure peripherals and installs a
+   secure monitor.
+   U-Boot is running in normal world and uses TF-A monitor
+   to access to secure resources
+
+2) The "Basic" boot chain (defconfig_file : stm32mp15_basic_defconfig)
+   BootRom => FSBL = U-Boot SPL => SSBL = U-Boot
+   SPL has limited security initialisation
+   U-Boot is running in secure mode and provide a secure monitor to the kernel
+   with only PSCI support (Power State Coordination Interface defined by ARM)
+
+All the STM32MP1 boards supported by U-Boot use the same generic board
+stm32mp1 which support all the bootable devices.
+
+Each board is configurated only with the associated device tree.
+
+4. Device Tree Selection
+========================
+
+You need to select the appropriate device tree for your board,
+the supported device trees for stm32mp157 are:
+
++ ev1: eval board with pmic stpmic1 (ev1 = mother board + daughter ed1)
+  dts: stm32mp157c-ev1
+
++ ed1: daughter board with pmic stpmic1
+  dts: stm32mp157c-ed1
+
++ dk1: Discovery board
+  dts: stm32mp157a-dk1
+
++ dk2: Discovery board = dk1 with a BT/WiFI combo and a DSI panel
+  dts: stm32mp157c-dk2
+
+5. Build Procedure
+==================
+
+1. Install required tools for U-Boot
+
+   + install package needed in U-Boot makefile
+     (libssl-dev, swig, libpython-dev...)
+   + install ARMv7 toolchain for 32bit Cortex-A (from Linaro,
+     from SDK for STM32MP1, or any crosstoolchains from your distribution)
+
+2. Set the cross compiler:
+
+	# export CROSS_COMPILE=/path/to/toolchain/arm-linux-gnueabi-
+	(you can use any gcc cross compiler compatible with U-Boot)
+
+3. Select the output directory (optional)
+
+	# export KBUILD_OUTPUT=/path/to/output
+
+	for example: use one output directory for each configuration
+	# export KBUILD_OUTPUT=stm32mp15_trusted
+	# export KBUILD_OUTPUT=stm32mp15_basic
+
+4. Configure U-Boot:
+
+	# make <defconfig_file>
+
+	- For trusted boot mode : "stm32mp15_trusted_defconfig"
+	- For basic boot mode: "stm32mp15_basic_defconfig"
+
+5. Configure the device-tree and build the U-Boot image:
+
+	# make DEVICE_TREE=<name> all
+
+  example:
+  a) trusted boot on ev1
+	# export KBUILD_OUTPUT=stm32mp15_trusted
+	# make stm32mp15_trusted_defconfig
+	# make DEVICE_TREE=stm32mp157c-ev1 all
+
+  b) basic boot on dk2
+	# export KBUILD_OUTPUT=stm32mp15_basic
+	# make stm32mp15_basic_defconfig
+	# make DEVICE_TREE=stm32mp157c-dk2 all
+
+6. Output files
+
+  BootRom and TF-A expect binaries with STM32 image header
+  SPL expects file with U-Boot uImage header
+
+  So in the output directory (selected by KBUILD_OUTPUT),
+  you can found the needed files:
+
+  a) For Trusted boot
+   + FSBL = tf-a.stm32 (provided by TF-A compilation)
+   + SSBL = u-boot.stm32
+
+  b) For Basic boot
+   + FSBL = spl/u-boot-spl.stm32
+   + SSBL = u-boot.img
+
+6. Switch Setting for Boot Mode
+===============================
+
+You can select the boot mode,
+- on the daugther board ed1 with the switch SW1 : BOOT0, BOOT1, BOOT2
+- on board DK1/DK2 with the switch SW1 (BOOT1 forced to 0)
+
+ -----------------------------------
+  Boot Mode   BOOT2   BOOT1   BOOT0
+ -----------------------------------
+  Reserved	0	0	0
+  NOR		0	0	1
+  SD-Card	1	1	1
+  SD-Card	1	0	1
+  eMMC		0	1	0
+  NAND		0	1	1
+  Recovery	1	1	0
+  Recovery	0	0	0
+
+- on board DK1/DK2 with the switch SW1 : BOOT0, BOOT2
+  (BOOT1 forced to 0, NOR not supported)
+
+ --------------------------
+  Boot Mode   BOOT2  BOOT0
+ --------------------------
+  Reserved	1      0
+  SD-Card	1      1
+  Recovery	0      0
+
+Recovery is a boot from serial link (UART/USB) and it is used with
+STM32CubeProgrammer tool to load executable in RAM and to update the flash
+devices available on the board (NOR/NAND/eMMC/SDCARD).
+The communication between HOST and board is based on
+- for UARTs : the uart protocol used with all MCU STM32
+- for USB : based on USB DFU 1.1 (without the ST extensions used on MCU STM32)
+
+7. Prepare an SDCard
+===================
+
+The minimal requirements for STMP32MP1 boot up to U-Boot are:
+- GPT partitioning (with gdisk or with sgdisk)
+- 2 fsbl partitions, named fsbl1 and fsbl2, size at least 256KiB
+- one ssbl partition for U-Boot
+
+Then the minimal GPT partition is:
+   ----- ------- --------- ---------------
+  | Num | Name  | Size    |  Content     |
+   ----- ------- -------- ----------------
+  |  1  | fsbl1 | 256 KiB |  TF-A or SPL |
+  |  2  | fsbl2 | 256 KiB |  TF-A or SPL |
+  |  3  | ssbl  | enought |  U-Boot      |
+  |  *  |  -    |  -      |  Boot/Rootfs |
+   ----- ------- --------- ---------------
+
+(*) add bootable partition for extlinux.conf
+    following Generic Distribution
+    (doc/README.distro for use)
+
+  according the used card reader select the block device
+  (/dev/sdx or /dev/mmcblk0)
+  in the next example I use /dev/mmcblk0
+
+for example: with gpt table with 128 entries
+
+  a) remove previous formatting
+	# sgdisk -o /dev/<SDCard dev>
+
+  b) create minimal image
+	# sgdisk --resize-table=128 -a 1 \
+		-n 1:34:545		-c 1:fsbl1 \
+		-n 2:546:1057		-c 2:fsbl2 \
+		-n 3:1058:5153		-c 3:ssbl \
+		-p /dev/<SDCard dev>
+
+	you can add other partitions for kernel
+	one partition rootfs for example:
+		-n 3:5154:		-c 4:rootfs \
+
+  c) copy the FSBL (2 times) and SSBL file on the correct partition.
+     in this example in partition 1 to 3
+
+     for basic boot mode : <SDCard dev> = /dev/mmcblk0
+	# dd if=u-boot-spl.stm32 of=/dev/mmcblk0p1
+	# dd if=u-boot-spl.stm32 of=/dev/mmcblk0p2
+	# dd if=u-boot.img of=/dev/mmcblk0p3
+
+     for trusted boot mode :
+	# dd if=tf-a.stm32 of=/dev/mmcblk0p1
+	# dd if=tf-a.stm32 of=/dev/mmcblk0p2
+	# dd if=u-boot.stm32 of=/dev/mmcblk0p3
+
+To boot from SDCard, select BootPinMode = 1 1 1 and reset.
+
+8. Prepare eMMC
+===============
+You can use U-Boot to copy binary in eMMC.
+
+In the next example, you need to boot from SDCARD and the images (u-boot-spl.stm32, u-boot.img)
+are presents on SDCARD (mmc 0) in ext4 partition 4 (bootfs).
+
+To boot from SDCard, select BootPinMode = 1 1 1 and reset.
+
+Then you update the eMMC with the next U-Boot command :
+
+a) prepare GPT on eMMC,
+	example with 2 partitions, bootfs and roots:
+
+	# setenv emmc_part "name=ssbl,size=2MiB;name=bootfs,type=linux,bootable,size=64MiB;name=rootfs,type=linux,size=512"
+	# gpt write mmc 1 ${emmc_part}
+
+b) copy SPL on eMMC on firts boot partition
+	(SPL max size is 256kB, with LBA 512, 0x200)
+
+	# ext4load mmc 0:4 0xC0000000 u-boot-spl.stm32
+	# mmc dev 1
+	# mmc partconf 1 1 1 1
+	# mmc write ${fileaddr} 0 200
+	# mmc partconf 1 1 1 0
+
+b) copy U-Boot in first GPT partition of eMMC
+
+	# ext4load mmc 0:4 0xC0000000 u-boot.img
+	# mmc dev 1
+	# part start mmc 1 1 partstart
+	# part size mmc 1 1 partsize
+	# mmc write ${fileaddr} ${partstart} ${partsize}
+
+To boot from eMMC, select BootPinMode = 0 1 0 and reset.
+
+9. MAC Address
+==============
+
+Please read doc/README.enetaddr for the implementation guidelines for mac id
+usage. Basically, environment has precedence over board specific storage.
+
+Mac id storage and retrieval in stm32mp otp :
+- OTP_57[31:0] = MAC_ADDR[31:0]
+- OTP_58[15:0] = MAC_ADDR[47:32]
+
+To program a MAC address on virgin OTP words above, you can use the fuse command
+on bank 0 to access to internal OTP:
+
+    example to set mac address "12:34:56:78:9a:bc"
+
+    1- Write OTP
+       STM32MP> fuse prog -y 0 57 0x78563412 0x0000bc9a
+
+    2- Read OTP
+       STM32MP> fuse sense 0 57 2
+       Sensing bank 0:
+       Word 0x00000039: 78563412 0000bc9a
+
+    3- next REBOOT :
+       ### Setting environment from OTP MAC address = "12:34:56:78:9a:bc"
+
+    4 check env update
+       STM32MP> print ethaddr
+       ethaddr=12:34:56:78:9a:bc
+
+10. Coprocessor firmware
+========================
+
+U-Boot can boot the coprocessor before the kernel (coprocessor early boot).
+
+A/ Manuallly by using rproc commands (update the bootcmd)
+     Configurations
+	# env set name_copro "stm32mp15_m4.elf"
+	# env set dev_copro 0
+	# env set loadaddr_copro 0xC1000000
+
+     Load binary from bootfs partition (number 4) on SDCard (mmc 0)
+	# ext4load mmc 0:4 ${loadaddr_copro} ${name_copro}
+	=> ${filesize} updated with the size of the loaded file
+
+     Start M4 firmware with remote proc command
+	# rproc init
+	# rproc load ${dev_copro} ${loadaddr_copro} ${filesize}
+	# rproc load_rsc ${dev_copro} ${loadaddr_copro} ${filesize}
+	# rproc start ${dev_copro}
+
+B/ Automatically by using FIT feature and generic DISTRO bootcmd
+
+   see examples in this directory :
+
+   Generate FIT including kernel + device tree + M4 firmware
+   with cfg with M4 boot
+        $> mkimage -f fit_copro_kernel_dtb.its fit_copro_kernel_dtb.itb
+
+    Then using DISTRO configuration file: see extlinux.conf to select
+    the correct configuration
+	=> stm32mp157c-ev1-m4
+	=> stm32mp157c-dk2-m4
diff --git a/board/engicam-st/stm32mp1-icore/board.c b/board/engicam-st/stm32mp1-icore/board.c
new file mode 100644
index 0000000..b6e5288
--- /dev/null
+++ b/board/engicam-st/stm32mp1-icore/board.c
@@ -0,0 +1,177 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright (C) 2018, STMicroelectronics - All Rights Reserved
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <asm/io.h>
+#include <asm/arch/ddr.h>
+#include <power/pmic.h>
+#include <power/stpmic1.h>
+
+#ifdef CONFIG_DEBUG_UART_BOARD_INIT
+void board_debug_uart_init(void)
+{
+#if (CONFIG_DEBUG_UART_BASE == STM32_UART4_BASE)
+
+#define RCC_MP_APB1ENSETR (STM32_RCC_BASE + 0x0A00)
+#define RCC_MP_AHB4ENSETR (STM32_RCC_BASE + 0x0A28)
+
+	/* UART4 clock enable */
+	setbits_le32(RCC_MP_APB1ENSETR, BIT(16));
+
+#define GPIOG_BASE 0x50008000
+	/* GPIOG clock enable */
+	writel(BIT(6), RCC_MP_AHB4ENSETR);
+	/* GPIO configuration for EVAL board
+	 * => Uart4 TX = G11
+	 */
+	writel(0xffbfffff, GPIOG_BASE + 0x00);
+	writel(0x00006000, GPIOG_BASE + 0x24);
+#else
+
+#error("CONFIG_DEBUG_UART_BASE: not supported value")
+
+#endif
+}
+#endif
+
+#ifdef CONFIG_PMIC_STPMIC1
+int board_ddr_power_init(enum ddr_type ddr_type)
+{
+	struct udevice *dev;
+	bool buck3_at_1800000v = false;
+	int ret;
+
+	ret = uclass_get_device_by_driver(UCLASS_PMIC,
+					  DM_GET_DRIVER(pmic_stpmic1), &dev);
+	if (ret)
+		/* No PMIC on power discrete board */
+		return 0;
+
+	switch (ddr_type) {
+	case STM32MP_DDR3:
+		/* VTT = Set LDO3 to sync mode */
+		ret = pmic_reg_read(dev, STPMIC1_LDOX_MAIN_CR(STPMIC1_LDO3));
+		if (ret < 0)
+			return ret;
+
+		ret &= ~STPMIC1_LDO3_MODE;
+		ret &= ~STPMIC1_LDO12356_VOUT_MASK;
+		ret |= STPMIC1_LDO_VOUT(STPMIC1_LDO3_DDR_SEL);
+
+		ret = pmic_reg_write(dev, STPMIC1_LDOX_MAIN_CR(STPMIC1_LDO3),
+				     ret);
+		if (ret < 0)
+			return ret;
+
+		/* VDD_DDR = Set BUCK2 to 1.35V */
+		ret = pmic_clrsetbits(dev,
+				      STPMIC1_BUCKX_MAIN_CR(STPMIC1_BUCK2),
+				      STPMIC1_BUCK_VOUT_MASK,
+				      STPMIC1_BUCK2_1350000V);
+		if (ret < 0)
+			return ret;
+
+		/* Enable VDD_DDR = BUCK2 */
+		ret = pmic_clrsetbits(dev,
+				      STPMIC1_BUCKX_MAIN_CR(STPMIC1_BUCK2),
+				      STPMIC1_BUCK_ENA, STPMIC1_BUCK_ENA);
+		if (ret < 0)
+			return ret;
+
+		mdelay(STPMIC1_DEFAULT_START_UP_DELAY_MS);
+
+		/* Enable VREF */
+		ret = pmic_clrsetbits(dev, STPMIC1_REFDDR_MAIN_CR,
+				      STPMIC1_VREF_ENA, STPMIC1_VREF_ENA);
+		if (ret < 0)
+			return ret;
+
+		mdelay(STPMIC1_DEFAULT_START_UP_DELAY_MS);
+
+		/* Enable VTT = LDO3 */
+		ret = pmic_clrsetbits(dev,
+				      STPMIC1_LDOX_MAIN_CR(STPMIC1_LDO3),
+				      STPMIC1_LDO_ENA, STPMIC1_LDO_ENA);
+		if (ret < 0)
+			return ret;
+
+		mdelay(STPMIC1_DEFAULT_START_UP_DELAY_MS);
+
+		break;
+
+	case STM32MP_LPDDR2:
+	case STM32MP_LPDDR3:
+		/*
+		 * configure VDD_DDR1 = LDO3
+		 * Set LDO3 to 1.8V
+		 * + bypass mode if BUCK3 = 1.8V
+		 * + normal mode if BUCK3 != 1.8V
+		 */
+		ret = pmic_reg_read(dev,
+				    STPMIC1_BUCKX_MAIN_CR(STPMIC1_BUCK3));
+		if (ret < 0)
+			return ret;
+
+		if ((ret & STPMIC1_BUCK3_1800000V) == STPMIC1_BUCK3_1800000V)
+			buck3_at_1800000v = true;
+
+		ret = pmic_reg_read(dev, STPMIC1_LDOX_MAIN_CR(STPMIC1_LDO3));
+		if (ret < 0)
+			return ret;
+
+		ret &= ~STPMIC1_LDO3_MODE;
+		ret &= ~STPMIC1_LDO12356_VOUT_MASK;
+		ret |= STPMIC1_LDO3_1800000;
+		if (buck3_at_1800000v)
+			ret |= STPMIC1_LDO3_MODE;
+
+		ret = pmic_reg_write(dev, STPMIC1_LDOX_MAIN_CR(STPMIC1_LDO3),
+				     ret);
+		if (ret < 0)
+			return ret;
+
+		/* VDD_DDR2 : Set BUCK2 to 1.2V */
+		ret = pmic_clrsetbits(dev,
+				      STPMIC1_BUCKX_MAIN_CR(STPMIC1_BUCK2),
+				      STPMIC1_BUCK_VOUT_MASK,
+				      STPMIC1_BUCK2_1200000V);
+		if (ret < 0)
+			return ret;
+
+		/* Enable VDD_DDR1 = LDO3 */
+		ret = pmic_clrsetbits(dev, STPMIC1_LDOX_MAIN_CR(STPMIC1_LDO3),
+				      STPMIC1_LDO_ENA, STPMIC1_LDO_ENA);
+		if (ret < 0)
+			return ret;
+
+		mdelay(STPMIC1_DEFAULT_START_UP_DELAY_MS);
+
+		/* Enable VDD_DDR22 =BUCK2 */
+		ret = pmic_clrsetbits(dev,
+				      STPMIC1_BUCKX_MAIN_CR(STPMIC1_BUCK2),
+				      STPMIC1_BUCK_ENA, STPMIC1_BUCK_ENA);
+		if (ret < 0)
+			return ret;
+
+		mdelay(STPMIC1_DEFAULT_START_UP_DELAY_MS);
+
+		/* Enable VREF */
+		ret = pmic_clrsetbits(dev, STPMIC1_REFDDR_MAIN_CR,
+				      STPMIC1_VREF_ENA, STPMIC1_VREF_ENA);
+		if (ret < 0)
+			return ret;
+
+		mdelay(STPMIC1_DEFAULT_START_UP_DELAY_MS);
+
+		break;
+
+	default:
+		break;
+	};
+
+	return 0;
+}
+#endif
diff --git a/board/engicam-st/stm32mp1-icore/cmd_stboard.c b/board/engicam-st/stm32mp1-icore/cmd_stboard.c
new file mode 100644
index 0000000..38b1c1b
--- /dev/null
+++ b/board/engicam-st/stm32mp1-icore/cmd_stboard.c
@@ -0,0 +1,145 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright (C) 2018, STMicroelectronics - All Rights Reserved
+ */
+
+#include <common.h>
+#include <console.h>
+#include <misc.h>
+#include <dm/device.h>
+#include <dm/uclass.h>
+
+static bool check_stboard(u16 board)
+{
+	int i;
+	const u16 st_board_id[] = {
+		0x1272,
+		0x1263,
+		0x1264,
+		0x1298,
+		0x1341,
+		0x1497,
+	};
+
+	for (i = 0; i < ARRAY_SIZE(st_board_id); i++)
+		if (board == st_board_id[i])
+			return true;
+
+	return false;
+}
+
+static void display_stboard(u32 otp)
+{
+	printf("Board: MB%04x Var%d Rev.%c-%02d\n",
+	       otp >> 16,
+	       (otp >> 12) & 0xF,
+	       ((otp >> 8) & 0xF) - 1 + 'A',
+	       otp & 0xF);
+}
+
+static int do_stboard(cmd_tbl_t *cmdtp, int flag, int argc,
+		      char * const argv[])
+{
+	int ret;
+	u32 otp;
+	u8 revision;
+	unsigned long board, variant, bom;
+	struct udevice *dev;
+	int confirmed = argc == 6 && !strcmp(argv[1], "-y");
+
+	argc -= 1 + confirmed;
+	argv += 1 + confirmed;
+
+	if (argc != 0 && argc != 4)
+		return CMD_RET_USAGE;
+
+	ret = uclass_get_device_by_driver(UCLASS_MISC,
+					  DM_GET_DRIVER(stm32mp_bsec),
+					  &dev);
+
+	ret = misc_read(dev, STM32_BSEC_SHADOW(BSEC_OTP_BOARD),
+			&otp, sizeof(otp));
+
+	if (ret) {
+		puts("OTP read error");
+		return CMD_RET_FAILURE;
+	}
+
+	if (argc == 0) {
+		if (!otp)
+			puts("Board : OTP board FREE\n");
+		else
+			display_stboard(otp);
+		return CMD_RET_SUCCESS;
+	}
+
+	if (otp) {
+		display_stboard(otp);
+		printf("ERROR: OTP board not FREE\n");
+		return CMD_RET_FAILURE;
+	}
+
+	if (strict_strtoul(argv[0], 16, &board) < 0 ||
+	    board == 0 || board > 0xFFFF) {
+		printf("argument %d invalid: %s\n", 1, argv[0]);
+		return CMD_RET_USAGE;
+	}
+
+	if (strict_strtoul(argv[1], 10, &variant) < 0 ||
+	    variant == 0 || variant > 15) {
+		printf("argument %d invalid: %s\n", 2, argv[1]);
+		return CMD_RET_USAGE;
+	}
+
+	revision = argv[2][0] - 'A' + 1;
+	if (strlen(argv[2]) > 1 || revision == 0 || revision > 15) {
+		printf("argument %d invalid: %s\n", 3, argv[2]);
+		return CMD_RET_USAGE;
+	}
+
+	if (strict_strtoul(argv[3], 10, &bom) < 0 ||
+	    bom == 0 || bom > 15) {
+		printf("argument %d invalid: %s\n", 4, argv[3]);
+		return CMD_RET_USAGE;
+	}
+
+	otp = (board << 16) | (variant << 12) | (revision << 8) | bom;
+	display_stboard(otp);
+	printf("=> OTP[%d] = %08X\n", BSEC_OTP_BOARD, otp);
+
+	if (!check_stboard((u16)board)) {
+		printf("Unknown board MB%04x\n", (u16)board);
+		return CMD_RET_FAILURE;
+	}
+	if (!confirmed) {
+		printf("Warning: Programming BOARD in OTP is irreversible!\n");
+		printf("Really perform this OTP programming? <y/N>\n");
+
+		if (!confirm_yesno()) {
+			puts("BOARD programming aborted\n");
+			return CMD_RET_FAILURE;
+		}
+	}
+
+	ret = misc_write(dev, STM32_BSEC_OTP(BSEC_OTP_BOARD),
+			 &otp, sizeof(otp));
+
+	if (ret) {
+		puts("BOARD programming error\n");
+		return CMD_RET_FAILURE;
+	}
+	puts("BOARD programming done\n");
+
+	return CMD_RET_SUCCESS;
+}
+
+U_BOOT_CMD(stboard, 6, 0, do_stboard,
+	   "read/write board reference in OTP",
+	   "\n"
+	   "  Print current board information\n"
+	   "stboard [-y] <Board> <Variant> <Revision> <BOM>\n"
+	   "  Write board information\n"
+	   "  - Board: xxxx, example 1264 for MB1264\n"
+	   "  - Variant: 1 ... 15\n"
+	   "  - Revision: A...O\n"
+	   "  - BOM: 1...15\n");
diff --git a/board/engicam-st/stm32mp1-icore/extlinux.conf b/board/engicam-st/stm32mp1-icore/extlinux.conf
new file mode 100644
index 0000000..2b46328
--- /dev/null
+++ b/board/engicam-st/stm32mp1-icore/extlinux.conf
@@ -0,0 +1,20 @@
+# Generic Distro Configuration for STM32MP157
+menu title Select the boot mode
+TIMEOUT 20
+DEFAULT stm32mp157c-ev1
+
+LABEL stm32mp157c-ev1
+	KERNEL /fit_kernel_dtb.itb#ev1
+	APPEND root=/dev/mmcblk0p6 rootwait rw earlyprintk console=ttyS3,115200
+
+LABEL stm32mp157c-ev1-m4
+	KERNEL /fit_copro_kernel_dtb.itb#ev1-m4
+	APPEND root=/dev/mmcblk0p6 rootwait rw earlyprintk console=ttyS3,115200
+
+LABEL stm32mp157c-dk2
+	KERNEL /fit_kernel_dtb.itb#dk2
+	APPEND root=/dev/mmcblk0p6 rootwait rw earlyprintk console=ttyS3,115200
+
+LABEL stm32mp157c-dk2-m4
+	KERNEL /fit_copro_kernel_dtb.itb#dk2-m4
+	APPEND root=/dev/mmcblk0p6 rootwait rw earlyprintk console=ttyS3,115200
diff --git a/board/engicam-st/stm32mp1-icore/fit_copro_kernel_dtb.its b/board/engicam-st/stm32mp1-icore/fit_copro_kernel_dtb.its
new file mode 100644
index 0000000..7582fc3
--- /dev/null
+++ b/board/engicam-st/stm32mp1-icore/fit_copro_kernel_dtb.its
@@ -0,0 +1,103 @@
+/*
+ * Compilation:
+ * mkimage -f fit_copro_kernel_dtb.its fit_copro_kernel_dtb.itb
+ */
+
+/dts-v1/;
+/ {
+	description = "U-Boot fitImage for stm32mp157";
+	#address-cells = <1>;
+
+	images {
+
+		copro {
+			description = "M4 copro";
+			data = /incbin/("stm32mp15_m4.elf");
+			type = "stm32copro";
+			arch = "arm";
+			compression = "none";
+			load = <0xC0800000>;
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+
+		kernel {
+			description = "Linux kernel";
+			data = /incbin/("zImage");
+			type = "kernel";
+			arch = "arm";
+			os = "linux";
+			compression = "none";
+			load = <0xC0008000>;
+			entry = <0xC0008000>;
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+
+		fdt-dk2 {
+			description = "FDT dk2";
+			data = /incbin/("stm32mp157c-dk2.dtb");
+			type = "flat_dt";
+			arch = "arm";
+			compression = "none";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+
+		fdt-ev1 {
+			description = "FDT ev1";
+			data = /incbin/("stm32mp157c-ev1.dtb");
+			type = "flat_dt";
+			arch = "arm";
+			compression = "none";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+	};
+
+	configurations {
+		default = "dk2-m4";
+
+		dk2-m4 {
+			description = "dk2-m4";
+			loadables = "copro";
+			kernel = "kernel";
+			fdt = "fdt-dk2";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+
+		dk2 {
+			description = "dk2";
+			kernel = "kernel";
+			fdt = "fdt-dk2";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+
+		ev1-m4 {
+			description = "ev1-m4";
+			loadables = "copro";
+			kernel = "kernel";
+			fdt = "fdt-ev1";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+
+		ev1 {
+			description = "ev1";
+			kernel = "kernel";
+			fdt = "fdt-ev1";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+	};
+};
diff --git a/board/engicam-st/stm32mp1-icore/fit_kernel_dtb.its b/board/engicam-st/stm32mp1-icore/fit_kernel_dtb.its
new file mode 100644
index 0000000..18d03eb
--- /dev/null
+++ b/board/engicam-st/stm32mp1-icore/fit_kernel_dtb.its
@@ -0,0 +1,82 @@
+/*
+ * Compilation:
+ * mkimage -f fit_kernel_dtb.its fit_kernel_dtb.itb
+ *
+ * Files in linux build dir:
+ * - arch/arm/boot/zImage
+ * - arch/arm/boot/dts/stm32mp157c-dk2.dtb
+ * - arch/arm/boot/dts/stm32mp157c-ev1.dtb
+ *
+ * load mmc 0:4 $kernel_addr_r fit_kernel_dtb.itb
+ * bootm $kernel_addr_r
+ * bootm $kernel_addr_r#dk2
+ * bootm $kernel_addr_r#ev1
+ *
+ * or use extlinux.conf in this directory
+ */
+
+/dts-v1/;
+/ {
+	description = "U-Boot fitImage for stm32mp157";
+	#address-cells = <1>;
+
+	images {
+		kernel {
+			description = "Linux kernel";
+			data = /incbin/("zImage");
+			type = "kernel";
+			arch = "arm";
+			os = "linux";
+			compression = "none";
+			load = <0xC0008000>;
+			entry = <0xC0008000>;
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+
+		fdt-dk2 {
+			description = "FDT dk2";
+			data = /incbin/("stm32mp157c-dk2.dtb");
+			type = "flat_dt";
+			arch = "arm";
+			compression = "none";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+
+		fdt-ev1 {
+			description = "FDT ev1";
+			data = /incbin/("stm32mp157c-ev1.dtb");
+			type = "flat_dt";
+			arch = "arm";
+			compression = "none";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+	};
+
+	configurations {
+		default = "dk2";
+
+		dk2 {
+			description = "dk2";
+			kernel = "kernel";
+			fdt = "fdt-dk2";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+
+		ev1 {
+			description = "ev1";
+			kernel = "kernel";
+			fdt = "fdt-ev1";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+	};
+};
diff --git a/board/engicam-st/stm32mp1-icore/spl.c b/board/engicam-st/stm32mp1-icore/spl.c
new file mode 100644
index 0000000..e65ff28
--- /dev/null
+++ b/board/engicam-st/stm32mp1-icore/spl.c
@@ -0,0 +1,45 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright (C) 2018, STMicroelectronics - All Rights Reserved
+ */
+
+#include <config.h>
+#include <common.h>
+#include <spl.h>
+#include <dm.h>
+#include <ram.h>
+#include <asm/io.h>
+#include <power/pmic.h>
+#include <power/stpmic1.h>
+#include <asm/arch/ddr.h>
+
+void spl_board_init(void)
+{
+	/* Keep vdd on during the reset cycle */
+#if defined(CONFIG_PMIC_STPMIC1) && defined(CONFIG_SPL_POWER_SUPPORT)
+	struct udevice *dev;
+	int ret;
+
+	ret = uclass_get_device_by_driver(UCLASS_PMIC,
+					  DM_GET_DRIVER(pmic_stpmic1), &dev);
+	if (!ret)
+		pmic_clrsetbits(dev,
+				STPMIC1_BUCKS_MRST_CR,
+				STPMIC1_MRST_BUCK(STPMIC1_BUCK3),
+				STPMIC1_MRST_BUCK(STPMIC1_BUCK3));
+
+	/* Check if debug is enabled to program PMIC according to the bit */
+	if ((readl(TAMP_BOOT_CONTEXT) & TAMP_BOOT_DEBUG_ON) && !ret) {
+		printf("Keep debug unit ON\n");
+
+		pmic_clrsetbits(dev, STPMIC1_BUCKS_MRST_CR,
+				STPMIC1_MRST_BUCK_DEBUG,
+				STPMIC1_MRST_BUCK_DEBUG);
+
+		if (STPMIC1_MRST_LDO_DEBUG)
+			pmic_clrsetbits(dev, STPMIC1_LDOS_MRST_CR,
+					STPMIC1_MRST_LDO_DEBUG,
+					STPMIC1_MRST_LDO_DEBUG);
+	}
+#endif
+}
diff --git a/board/engicam-st/stm32mp1-icore/stm32mp1.c b/board/engicam-st/stm32mp1-icore/stm32mp1.c
new file mode 100644
index 0000000..17a19f8
--- /dev/null
+++ b/board/engicam-st/stm32mp1-icore/stm32mp1.c
@@ -0,0 +1,976 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright (C) 2018, STMicroelectronics - All Rights Reserved
+ */
+
+#include <config.h>
+#include <common.h>
+#include <adc.h>
+#include <dm.h>
+#include <clk.h>
+#include <console.h>
+#include <fdt_support.h>
+#include <generic-phy.h>
+#include <i2c.h>
+#include <led.h>
+#include <misc.h>
+#include <mtd_node.h>
+#include <phy.h>
+#include <remoteproc.h>
+#include <reset.h>
+#include <syscon.h>
+#include <usb.h>
+#include <asm/io.h>
+#include <asm/gpio.h>
+#include <asm/arch/stm32.h>
+#include <asm/arch/stm32mp1_smc.h>
+#include <jffs2/load_kernel.h>
+#include <power/regulator.h>
+#include <usb/dwc2_udc.h>
+
+/* SYSCFG registers */
+#define SYSCFG_BOOTR		0x00
+#define SYSCFG_PMCSETR		0x04
+#define SYSCFG_IOCTRLSETR	0x18
+#define SYSCFG_ICNR		0x1C
+#define SYSCFG_CMPCR		0x20
+#define SYSCFG_CMPENSETR	0x24
+#define SYSCFG_PMCCLRR		0x44
+
+#define SYSCFG_IOCTRLSETR_HSLVEN_TRACE		BIT(0)
+#define SYSCFG_IOCTRLSETR_HSLVEN_QUADSPI	BIT(1)
+#define SYSCFG_IOCTRLSETR_HSLVEN_ETH		BIT(2)
+#define SYSCFG_IOCTRLSETR_HSLVEN_SDMMC		BIT(3)
+#define SYSCFG_IOCTRLSETR_HSLVEN_SPI		BIT(4)
+
+#define SYSCFG_CMPCR_SW_CTRL		BIT(1)
+#define SYSCFG_CMPCR_READY		BIT(8)
+
+#define SYSCFG_CMPENSETR_MPU_EN		BIT(0)
+
+#define SYSCFG_PMCSETR_ETH_CLK_SEL	BIT(16)
+#define SYSCFG_PMCSETR_ETH_REF_CLK_SEL	BIT(17)
+
+#define SYSCFG_PMCSETR_ETH_SELMII	BIT(20)
+
+#define SYSCFG_PMCSETR_ETH_SEL_MASK	GENMASK(23, 21)
+#define SYSCFG_PMCSETR_ETH_SEL_GMII_MII	(0 << 21)
+#define SYSCFG_PMCSETR_ETH_SEL_RGMII	(1 << 21)
+#define SYSCFG_PMCSETR_ETH_SEL_RMII	(4 << 21)
+
+/*
+ * Get a global data pointer
+ */
+DECLARE_GLOBAL_DATA_PTR;
+
+#define USB_WARNING_LOW_THRESHOLD_UV	660000
+#define USB_START_LOW_THRESHOLD_UV	1230000
+#define USB_START_HIGH_THRESHOLD_UV	2100000
+
+
+#if 0
+int reset_eth_phy(void)
+{
+    ofnode node;
+    struct gpio_desc gpio;
+
+    node = ofnode_path("/config");
+    if (!ofnode_valid(node)) {
+            return -1;
+    }
+
+    if (gpio_request_by_name_nodev(node, "st,reset-phy-gpios", 0,
+				       &gpio, GPIOD_IS_OUT)) {
+        return -2;
+	}
+	
+    if (dm_gpio_set_value(&gpio,1)) {
+        return -3;
+    }
+
+   	udelay(20000);
+
+    if (dm_gpio_set_value(&gpio,0)) {
+        return -4;
+    }
+
+    return 0;
+}
+#endif
+
+int checkboard(void)
+{
+	int ret;
+	char *mode;
+	u32 otp;
+	struct udevice *dev;
+	const char *fdt_compat;
+	int fdt_compat_len;
+
+	if (IS_ENABLED(CONFIG_STM32MP1_TRUSTED))
+		mode = "trusted";
+	else
+		mode = "basic";
+
+	printf("Board: stm32mp1 in %s mode", mode);
+	fdt_compat = fdt_getprop(gd->fdt_blob, 0, "compatible",
+				 &fdt_compat_len);
+	if (fdt_compat && fdt_compat_len)
+		printf(" (%s)", fdt_compat);
+	puts("\n");
+
+	ret = uclass_get_device_by_driver(UCLASS_MISC,
+					  DM_GET_DRIVER(stm32mp_bsec),
+					  &dev);
+
+	if (!ret)
+		ret = misc_read(dev, STM32_BSEC_SHADOW(BSEC_OTP_BOARD),
+				&otp, sizeof(otp));
+	if (!ret && otp) {
+		printf("Board: MB%04x Var%d Rev.%c-%02d\n",
+		       otp >> 16,
+		       (otp >> 12) & 0xF,
+		       ((otp >> 8) & 0xF) - 1 + 'A',
+		       otp & 0xF);
+	}
+
+	return 0;
+}
+
+static void board_key_check(void)
+{
+#if defined(CONFIG_FASTBOOT) || defined(CONFIG_CMD_STM32PROG)
+	ofnode node;
+	struct gpio_desc gpio;
+	enum forced_boot_mode boot_mode = BOOT_NORMAL;
+
+	node = ofnode_path("/config");
+	if (!ofnode_valid(node)) {
+		debug("%s: no /config node?\n", __func__);
+		return;
+	}
+#ifdef CONFIG_FASTBOOT
+	if (gpio_request_by_name_nodev(node, "st,fastboot-gpios", 0,
+				       &gpio, GPIOD_IS_IN)) {
+		debug("%s: could not find a /config/st,fastboot-gpios\n",
+		      __func__);
+	} else {
+		if (dm_gpio_get_value(&gpio)) {
+			puts("Fastboot key pressed, ");
+			boot_mode = BOOT_FASTBOOT;
+		}
+
+		dm_gpio_free(NULL, &gpio);
+	}
+#endif
+#ifdef CONFIG_CMD_STM32PROG
+	if (gpio_request_by_name_nodev(node, "st,stm32prog-gpios", 0,
+				       &gpio, GPIOD_IS_IN)) {
+		debug("%s: could not find a /config/st,stm32prog-gpios\n",
+		      __func__);
+	} else {
+		if (dm_gpio_get_value(&gpio)) {
+			puts("STM32Programmer key pressed, ");
+			boot_mode = BOOT_STM32PROG;
+		}
+		dm_gpio_free(NULL, &gpio);
+	}
+#endif
+
+	if (boot_mode != BOOT_NORMAL) {
+		puts("entering download mode...\n");
+		clrsetbits_le32(TAMP_BOOT_CONTEXT,
+				TAMP_BOOT_FORCED_MASK,
+				boot_mode);
+	}
+#endif
+}
+
+bool board_is_dk2(void)
+{
+	if (of_machine_is_compatible("st,stm32mp157c-dk2"))
+		return true;
+
+	return false;
+}
+
+int board_late_init(void)
+{
+#ifdef CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
+	const void *fdt_compat;
+	int fdt_compat_len;
+
+	fdt_compat = fdt_getprop(gd->fdt_blob, 0, "compatible",
+				 &fdt_compat_len);
+	if (fdt_compat && fdt_compat_len) {
+		if (strncmp(fdt_compat, "st,", 3) != 0)
+			env_set("board_name", fdt_compat);
+		else
+			env_set("board_name", fdt_compat + 3);
+	}
+#endif
+
+	return 0;
+}
+
+#ifdef CONFIG_STM32_SDMMC2
+/* this is a weak define that we are overriding */
+int board_mmc_init(void)
+{
+	return 0;
+}
+#endif
+
+#ifdef CONFIG_STM32_QSPI
+void board_qspi_init(void)
+{
+}
+#endif /* CONFIG_STM32_QSPI */
+
+#if defined(CONFIG_USB_GADGET) && defined(CONFIG_USB_GADGET_DWC2_OTG)
+
+/*
+ * DWC2 registers should be defined in drivers
+ * OTG: drivers/usb/gadget/dwc2_udc_otg_regs.h
+ * HOST: ./drivers/usb/host/dwc2.h
+ */
+#define DWC2_GOTGCTL_OFFSET		0x00
+#define DWC2_GGPIO_OFFSET		0x38
+
+#define DWC2_GGPIO_VBUS_SENSING		BIT(21)
+
+#define DWC2_GOTGCTL_AVALIDOVEN		BIT(4)
+#define DWC2_GOTGCTL_AVALIDOVVAL	BIT(5)
+#define DWC2_GOTGCTL_BVALIDOVEN		BIT(6)
+#define DWC2_GOTGCTL_BVALIDOVVAL	BIT(7)
+#define DWC2_GOTGCTL_BSVLD		BIT(19)
+
+#define STM32MP_GUSBCFG			0x40002407
+
+static struct dwc2_plat_otg_data stm32mp_otg_data = {
+	.regs_otg = FDT_ADDR_T_NONE,
+	.usb_gusbcfg = STM32MP_GUSBCFG,
+	.priv = NULL, /* pointer to udevice for stusb1600 when present */
+};
+
+static struct reset_ctl usbotg_reset;
+
+/* STMicroelectronics STUSB1600 Type-C controller */
+#define STUSB1600_CC_CONNECTION_STATUS		0x0E
+
+/* STUSB1600_CC_CONNECTION_STATUS bitfields */
+#define STUSB1600_CC_ATTACH			BIT(0)
+
+static int stusb1600_init(void)
+{
+	struct udevice *dev, *bus;
+	ofnode node;
+	int ret;
+	u32 chip_addr;
+
+	node = ofnode_by_compatible(ofnode_null(), "st,stusb1600");
+	if (!ofnode_valid(node)) {
+		printf("stusb1600 not found\n");
+		return -ENODEV;
+	}
+
+	ret = ofnode_read_u32(node, "reg", &chip_addr);
+	if (ret)
+		return -EINVAL;
+
+	ret = uclass_get_device_by_ofnode(UCLASS_I2C, ofnode_get_parent(node),
+					  &bus);
+	if (ret) {
+		printf("bus for stusb1600 not found\n");
+		return -ENODEV;
+	}
+
+	ret = dm_i2c_probe(bus, chip_addr, 0, &dev);
+	if (!ret)
+		stm32mp_otg_data.priv = dev;
+
+	return ret;
+}
+
+static int stusb1600_cable_connected(void)
+{
+	struct udevice *stusb1600_dev = stm32mp_otg_data.priv;
+	u8 status;
+
+	if (dm_i2c_read(stusb1600_dev,
+			STUSB1600_CC_CONNECTION_STATUS,
+			&status, 1))
+		return 0;
+
+	return status & STUSB1600_CC_ATTACH;
+}
+
+void board_usbotg_init(void)
+{
+	int node;
+	struct fdtdec_phandle_args args;
+	struct udevice *dev;
+	const void *blob = gd->fdt_blob;
+	struct clk clk;
+
+	/* find the usb otg node */
+	node = fdt_node_offset_by_compatible(blob, -1, "snps,dwc2");
+	if (node < 0) {
+		debug("Not found usb_otg device\n");
+		return;
+	}
+
+	if (!fdtdec_get_is_enabled(blob, node)) {
+		debug("stm32 usbotg is disabled in the device tree\n");
+		return;
+	}
+
+	/* Enable clock */
+	if (fdtdec_parse_phandle_with_args(blob, node, "clocks",
+					   "#clock-cells", 0, 0, &args)) {
+		debug("usbotg has no clocks defined in the device tree\n");
+		return;
+	}
+
+	if (uclass_get_device_by_of_offset(UCLASS_CLK, args.node, &dev))
+		return;
+
+	if (args.args_count != 1)
+		return;
+
+	clk.dev = dev;
+	clk.id = args.args[0];
+
+	if (clk_enable(&clk)) {
+		debug("Failed to enable usbotg clock\n");
+		return;
+	}
+
+	/* Reset */
+	if (fdtdec_parse_phandle_with_args(blob, node, "resets",
+					   "#reset-cells", 0, 0, &args)) {
+		debug("usbotg has no resets defined in the device tree\n");
+		goto clk_err;
+	}
+
+	if ((uclass_get_device_by_of_offset(UCLASS_RESET, args.node, &dev)) ||
+	    args.args_count != 1)
+		goto clk_err;
+
+	usbotg_reset.dev = dev;
+	usbotg_reset.id = args.args[0];
+
+	/* Phy */
+	if (!(fdtdec_parse_phandle_with_args(blob, node, "phys",
+					     "#phy-cells", 0, 0, &args))) {
+		stm32mp_otg_data.phy_of_node =
+			fdt_parent_offset(blob, args.node);
+		if (stm32mp_otg_data.phy_of_node <= 0) {
+			debug("Not found usbo phy device\n");
+			goto clk_err;
+		}
+		stm32mp_otg_data.regs_phy = fdtdec_get_uint(blob, args.node,
+							    "reg", -1);
+	}
+
+	/* Parse and store data needed for gadget */
+	stm32mp_otg_data.regs_otg = fdtdec_get_addr(blob, node, "reg");
+	if (stm32mp_otg_data.regs_otg == FDT_ADDR_T_NONE) {
+		debug("usbotg: can't get base address\n");
+		goto clk_err;
+	}
+
+	stm32mp_otg_data.rx_fifo_sz = fdtdec_get_int(blob, node,
+						     "g-rx-fifo-size", 0);
+	stm32mp_otg_data.np_tx_fifo_sz = fdtdec_get_int(blob, node,
+							"g-np-tx-fifo-size", 0);
+	stm32mp_otg_data.tx_fifo_sz = fdtdec_get_int(blob, node,
+						     "g-tx-fifo-size", 0);
+
+	if (fdtdec_get_bool(blob, node, "usb1600")) {
+		stusb1600_init();
+		return;
+	}
+
+	/* Enable voltage level detector */
+	if (!(fdtdec_parse_phandle_with_args(blob, node, "usb33d-supply",
+					     NULL, 0, 0, &args)))
+		if (!uclass_get_device_by_of_offset(UCLASS_REGULATOR,
+						    args.node, &dev))
+			if (regulator_set_enable(dev, true)) {
+				debug("Failed to enable usb33d\n");
+				goto clk_err;
+			}
+
+	return;
+
+clk_err:
+	clk_disable(&clk);
+}
+
+int board_usb_init(int index, enum usb_init_type init)
+{
+	if (init == USB_INIT_HOST)
+		return 0;
+
+	if (stm32mp_otg_data.regs_otg == FDT_ADDR_T_NONE)
+		return -EINVAL;
+
+	/* Reset usbotg */
+	reset_assert(&usbotg_reset);
+	udelay(2);
+	reset_deassert(&usbotg_reset);
+
+	/* if the board embed an USB1600 chip */
+	if (stm32mp_otg_data.priv)
+		/* Override A/B session valid bits */
+		stm32mp_otg_data.usb_gotgctl = DWC2_GOTGCTL_AVALIDOVEN |
+					       DWC2_GOTGCTL_AVALIDOVVAL |
+					       DWC2_GOTGCTL_BVALIDOVEN |
+					       DWC2_GOTGCTL_BVALIDOVVAL;
+	else
+		/* Enable vbus sensing */
+		setbits_le32(stm32mp_otg_data.regs_otg + DWC2_GGPIO_OFFSET,
+			     DWC2_GGPIO_VBUS_SENSING);
+
+	return dwc2_udc_probe(&stm32mp_otg_data);
+}
+
+int g_dnl_board_usb_cable_connected(void)
+{
+	if (stm32mp_otg_data.priv)
+		return stusb1600_cable_connected();
+
+	return readl(stm32mp_otg_data.regs_otg + DWC2_GOTGCTL_OFFSET) &
+		DWC2_GOTGCTL_BSVLD;
+}
+
+#define STM32MP1_G_DNL_DFU_PRODUCT_NUM 0xdf11
+int g_dnl_bind_fixup(struct usb_device_descriptor *dev, const char *name)
+{
+	if (!strcmp(name, "usb_dnl_dfu"))
+		put_unaligned(STM32MP1_G_DNL_DFU_PRODUCT_NUM, &dev->idProduct);
+	else
+		put_unaligned(CONFIG_USB_GADGET_PRODUCT_NUM, &dev->idProduct);
+
+	return 0;
+}
+#endif /* CONFIG_USB_GADGET */
+
+static void sysconf_init(void)
+{
+	u8 *syscfg;
+#ifdef CONFIG_DM_REGULATOR
+	struct udevice *pwr_dev;
+	struct udevice *pwr_reg;
+	struct udevice *dev;
+	int ret;
+	u32 otp = 0;
+#endif
+	u32 bootr;
+
+	syscfg = (u8 *)syscon_get_first_range(STM32MP_SYSCON_SYSCFG);
+	debug("SYSCFG: init @0x%p\n", syscfg);
+
+	/* interconnect update : select master using the port 1 */
+	/* LTDC = AXI_M9 */
+	/* GPU  = AXI_M8 */
+	/* today information is hardcoded in U-Boot */
+	writel(BIT(9), syscfg + SYSCFG_ICNR);
+	debug("[0x%x] SYSCFG.icnr = 0x%08x (LTDC and GPU)\n",
+	      (u32)syscfg + SYSCFG_ICNR, readl(syscfg + SYSCFG_ICNR));
+
+	/* disable Pull-Down for boot pin connected to VDD */
+	bootr = readl(syscfg + SYSCFG_BOOTR);
+	bootr |= (bootr & 0x7 << 4);
+	writel(bootr, syscfg + SYSCFG_BOOTR);
+	debug("[0x%x] SYSCFG.bootr = 0x%08x\n",
+	      (u32)syscfg + SYSCFG_BOOTR, readl(syscfg + SYSCFG_BOOTR));
+
+#ifdef CONFIG_DM_REGULATOR
+	/* High Speed Low Voltage Pad mode Enable for SPI, SDMMC, ETH, QSPI
+	 * and TRACE. Needed above ~50MHz and conditioned by AFMUX selection.
+	 * The customer will have to disable this for low frequencies
+	 * or if AFMUX is selected but the function not used, typically for
+	 * TRACE. Otherwise, impact on power consumption.
+	 *
+	 * WARNING:
+	 *   enabling High Speed mode while VDD>2.7V
+	 *   with the OTP product_below_2v5 (OTP 18, BIT 13)
+	 *   erroneously set to 1 can damage the IC!
+	 *   => U-Boot set the register only if VDD < 2.7V (in DT)
+	 *      but this value need to be consistent with board design
+	 */
+	ret = syscon_get_by_driver_data(STM32MP_SYSCON_PWR, &pwr_dev);
+	if (!ret) {
+
+		ret = uclass_get_device_by_driver(UCLASS_MISC,
+						  DM_GET_DRIVER(stm32mp_bsec),
+						  &dev);
+		if (ret) {
+			pr_err("Can't find stm32mp_bsec driver\n");
+			return;
+		}
+
+		ret = misc_read(dev, STM32_BSEC_SHADOW(18), &otp, 4);
+		if (!ret)
+			otp = otp & BIT(13);
+
+		/* get VDD = pwr-supply */
+		ret = device_get_supply_regulator(pwr_dev, "pwr-supply",
+						  &pwr_reg);
+
+		/* check if VDD is Low Voltage */
+		if (!ret) {
+			if (regulator_get_value(pwr_reg) < 2700000) {
+				writel(SYSCFG_IOCTRLSETR_HSLVEN_TRACE |
+				       SYSCFG_IOCTRLSETR_HSLVEN_QUADSPI |
+				       SYSCFG_IOCTRLSETR_HSLVEN_ETH |
+				       SYSCFG_IOCTRLSETR_HSLVEN_SDMMC |
+				       SYSCFG_IOCTRLSETR_HSLVEN_SPI,
+				       syscfg + SYSCFG_IOCTRLSETR);
+
+				if (!otp)
+					pr_err("product_below_2v5=0: HSLVEN protected by HW\n");
+			} else {
+				if (otp)
+					pr_err("product_below_2v5=1: HSLVEN update is destructive, no update as VDD>2.7V\n");
+			}
+		} else {
+			debug("VDD unknown");
+		}
+	}
+#endif
+	debug("[0x%x] SYSCFG.IOCTRLSETR = 0x%08x\n",
+	      (u32)syscfg + SYSCFG_IOCTRLSETR,
+	      readl(syscfg + SYSCFG_IOCTRLSETR));
+
+	/* activate automatic I/O compensation
+	 * warning: need to ensure CSI enabled and ready in clock driver
+	 */
+	writel(SYSCFG_CMPENSETR_MPU_EN, syscfg + SYSCFG_CMPENSETR);
+
+	while (!(readl(syscfg + SYSCFG_CMPCR) & SYSCFG_CMPCR_READY))
+		;
+	clrbits_le32(syscfg + SYSCFG_CMPCR, SYSCFG_CMPCR_SW_CTRL);
+
+	debug("[0x%x] SYSCFG.cmpcr = 0x%08x\n",
+	      (u32)syscfg + SYSCFG_CMPCR, readl(syscfg + SYSCFG_CMPCR));
+}
+
+/* board interface eth init */
+/* this is a weak define that we are overriding */
+int board_interface_eth_init(int interface_type, bool eth_clk_sel_reg,
+			     bool eth_ref_clk_sel_reg)
+{
+	u8 *syscfg;
+	u32 value;
+
+	syscfg = (u8 *)syscon_get_first_range(STM32MP_SYSCON_SYSCFG);
+
+	if (!syscfg)
+		return -ENODEV;
+
+	switch (interface_type) {
+	case PHY_INTERFACE_MODE_MII:
+		value = SYSCFG_PMCSETR_ETH_SEL_GMII_MII |
+			SYSCFG_PMCSETR_ETH_REF_CLK_SEL;
+		debug("%s: PHY_INTERFACE_MODE_MII\n", __func__);
+		break;
+	case PHY_INTERFACE_MODE_GMII:
+		if (eth_clk_sel_reg)
+			value = SYSCFG_PMCSETR_ETH_SEL_GMII_MII |
+				SYSCFG_PMCSETR_ETH_CLK_SEL;
+		else
+			value = SYSCFG_PMCSETR_ETH_SEL_GMII_MII;
+		debug("%s: PHY_INTERFACE_MODE_GMII\n", __func__);
+		break;
+	case PHY_INTERFACE_MODE_RMII:
+		if (eth_ref_clk_sel_reg)
+			value = SYSCFG_PMCSETR_ETH_SEL_RMII |
+				SYSCFG_PMCSETR_ETH_REF_CLK_SEL;
+		else
+			value = SYSCFG_PMCSETR_ETH_SEL_RMII;
+		debug("%s: PHY_INTERFACE_MODE_RMII\n", __func__);
+		break;
+	case PHY_INTERFACE_MODE_RGMII:
+		if (eth_clk_sel_reg)
+			value = SYSCFG_PMCSETR_ETH_SEL_RGMII |
+				SYSCFG_PMCSETR_ETH_CLK_SEL;
+		else
+			value = SYSCFG_PMCSETR_ETH_SEL_RGMII;
+		debug("%s: PHY_INTERFACE_MODE_RGMII\n", __func__);
+		break;
+	default:
+		debug("%s: Do not manage %d interface\n",
+		      __func__, interface_type);
+		/* Do not manage others interfaces */
+		return -EINVAL;
+	}
+
+	/* clear and set ETH configuration bits */
+	writel(SYSCFG_PMCSETR_ETH_SEL_MASK | SYSCFG_PMCSETR_ETH_SELMII |
+	       SYSCFG_PMCSETR_ETH_REF_CLK_SEL | SYSCFG_PMCSETR_ETH_CLK_SEL,
+	       syscfg + SYSCFG_PMCCLRR);
+	writel(value, syscfg + SYSCFG_PMCSETR);
+
+	return 0;
+}
+
+#ifdef CONFIG_LED
+static int get_led(struct udevice **dev, char *led_string)
+{
+	char *led_name;
+	int ret;
+
+	led_name = fdtdec_get_config_string(gd->fdt_blob, led_string);
+	if (!led_name) {
+		pr_debug("%s: could not find %s config string\n",
+			 __func__, led_string);
+		return -ENOENT;
+	}
+	ret = led_get_by_label(led_name, dev);
+	if (ret) {
+		debug("%s: get=%d\n", __func__, ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int setup_led(enum led_state_t cmd)
+{
+	struct udevice *dev;
+	int ret;
+
+	ret = get_led(&dev, "u-boot,boot-led");
+	if (ret)
+		return ret;
+
+	ret = led_set_state(dev, cmd);
+	return ret;
+}
+#endif /* CONFIG_LED */
+
+#ifdef CONFIG_ADC
+static int board_check_usb_power(void)
+{
+	struct ofnode_phandle_args adc_args;
+	struct udevice *adc;
+	struct udevice *led;
+	ofnode node;
+	unsigned int raw;
+	int max_uV = 0;
+	int ret, uV, adc_count;
+	u8 i, nb_blink;
+
+	node = ofnode_path("/config");
+	if (!ofnode_valid(node)) {
+		debug("%s: no /config node?\n", __func__);
+		return -ENOENT;
+	}
+
+	/*
+	 * Retrieve the ADC channels devices and get measurement
+	 * for each of them
+	 */
+	adc_count = ofnode_count_phandle_with_args(node, "st,adc_usb_pd",
+						   "#io-channel-cells");
+	if (adc_count < 0) {
+		if (adc_count == -ENOENT)
+			return 0;
+
+		pr_err("%s: can't find adc channel (%d)\n", __func__,
+		       adc_count);
+
+		return adc_count;
+	}
+
+	for (i = 0; i < adc_count; i++) {
+		if (ofnode_parse_phandle_with_args(node, "st,adc_usb_pd",
+						   "#io-channel-cells", 0, i,
+						   &adc_args)) {
+			pr_debug("%s: can't find /config/st,adc_usb_pd\n",
+				 __func__);
+			return 0;
+		}
+
+		ret = uclass_get_device_by_ofnode(UCLASS_ADC, adc_args.node,
+						  &adc);
+
+		if (ret) {
+			pr_err("%s: Can't get adc device(%d)\n", __func__,
+			       ret);
+			return ret;
+		}
+
+		ret = adc_channel_single_shot(adc->name, adc_args.args[0],
+					      &raw);
+		if (ret) {
+			pr_err("%s: single shot failed for %s[%d]!\n",
+			       __func__, adc->name, adc_args.args[0]);
+			return ret;
+		}
+		/* Convert to uV */
+		if (!adc_raw_to_uV(adc, raw, &uV)) {
+			if (uV > max_uV)
+				max_uV = uV;
+			pr_debug("%s: %s[%02d] = %u, %d uV\n", __func__,
+				 adc->name, adc_args.args[0], raw, uV);
+		} else {
+			pr_err("%s: Can't get uV value for %s[%d]\n",
+			       __func__, adc->name, adc_args.args[0]);
+		}
+	}
+
+	/*
+	 * If highest value is inside 1.23 Volts and 2.10 Volts, that means
+	 * board is plugged on an USB-C 3A power supply and boot process can
+	 * continue.
+	 */
+	if (max_uV > USB_START_LOW_THRESHOLD_UV &&
+	    max_uV < USB_START_HIGH_THRESHOLD_UV)
+		return 0;
+
+	/* Stop boot process and make u-boot,error-led blinking */
+	pr_err("\n*******************************************\n");
+
+	if (max_uV < USB_WARNING_LOW_THRESHOLD_UV) {
+		pr_err("*   WARNING 500mA power supply detected   *\n");
+		nb_blink = 2;
+	} else {
+		pr_err("* WARNING 1.5A power supply detected      *\n");
+		nb_blink = 3;
+	}
+
+	pr_err("* Current too low, use a 3A power supply! *\n");
+	pr_err("*******************************************\n\n");
+
+	ret = get_led(&led, "u-boot,error-led");
+	if (ret)
+		return ret;
+
+	for (i = 0; i < nb_blink * 2; i++) {
+		led_set_state(led, LEDST_TOGGLE);
+		mdelay(125);
+	}
+	led_set_state(led, LEDST_ON);
+
+	return 0;
+}
+#endif /* CONFIG_ADC */
+
+#ifdef CONFIG_DM_REGULATOR
+/* Fix to make I2C1 usable on DK2 for touchscreen usage in kernel */
+static int dk2_i2c1_fix(void)
+{
+	ofnode node;
+	struct gpio_desc hdmi, audio;
+	int ret = 0;
+
+	node = ofnode_path("/soc/i2c@40012000/hdmi-transmitter@39");
+	if (!ofnode_valid(node)) {
+		pr_debug("%s: no hdmi-transmitter@39 ?\n", __func__);
+		return -ENOENT;
+	}
+
+	if (gpio_request_by_name_nodev(node, "reset-gpios", 0,
+				       &hdmi, GPIOD_IS_OUT)) {
+		pr_debug("%s: could not find reset-gpios\n",
+			 __func__);
+		return -ENOENT;
+	}
+
+	node = ofnode_path("/soc/i2c@40012000/cs42l51@4a");
+	if (!ofnode_valid(node)) {
+		pr_debug("%s: no cs42l51@4a ?\n", __func__);
+		return -ENOENT;
+	}
+
+	if (gpio_request_by_name_nodev(node, "reset-gpios", 0,
+				       &audio, GPIOD_IS_OUT)) {
+		pr_debug("%s: could not find reset-gpios\n",
+			 __func__);
+		return -ENOENT;
+	}
+
+	/* before power up, insure that HDMI anh AUDIO IC is under reset */
+	ret = dm_gpio_set_value(&hdmi, 1);
+	if (ret) {
+		pr_err("%s: can't set_value for hdmi_nrst gpio", __func__);
+		goto error;
+	}
+	ret = dm_gpio_set_value(&audio, 1);
+	if (ret) {
+		pr_err("%s: can't set_value for audio_nrst gpio", __func__);
+		goto error;
+	}
+
+	/* power-up audio IC */
+	regulator_autoset_by_name("v1v8_audio", NULL);
+
+	/* power-up HDMI IC */
+	regulator_autoset_by_name("v1v2_hdmi", NULL);
+	regulator_autoset_by_name("v3v3_hdmi", NULL);
+
+error:
+	return ret;
+}
+#endif
+
+/* board dependent setup after realloc */
+int board_init(void)
+{
+	struct udevice *dev;
+
+	/* address of boot parameters */
+	gd->bd->bi_boot_params = STM32_DDR_BASE + 0x100;
+
+	/* probe all PINCTRL for hog */
+	for (uclass_first_device(UCLASS_PINCTRL, &dev);
+	     dev;
+	     uclass_next_device(&dev)) {
+		pr_debug("probe pincontrol = %s\n", dev->name);
+	}
+
+	board_key_check();
+
+	if (IS_ENABLED(CONFIG_LED))
+		led_default_state();
+
+#ifdef CONFIG_DM_REGULATOR
+	if (board_is_dk2())
+		dk2_i2c1_fix();
+
+	regulators_enable_boot_on(_DEBUG);
+#endif
+
+#ifdef CONFIG_ADC
+	board_check_usb_power();
+#endif /* CONFIG_ADC */
+
+	sysconf_init();
+
+#ifdef CONFIG_STM32_SDMMC2
+	board_mmc_init();
+#endif /* CONFIG_STM32_SDMMC2 */
+
+#ifdef CONFIG_STM32_QSPI
+	board_qspi_init();
+#endif /* CONFIG_STM32_QSPI */
+
+#if defined(CONFIG_USB_GADGET) && defined(CONFIG_USB_GADGET_DWC2_OTG)
+	board_usbotg_init();
+#endif
+
+	return 0;
+}
+
+void board_quiesce_devices(void)
+{
+#ifdef CONFIG_LED
+	setup_led(LEDST_OFF);
+#endif
+}
+
+#ifdef CONFIG_SYS_MTDPARTS_RUNTIME
+void board_mtdparts_default(const char **mtdids, const char **mtdparts)
+{
+	struct udevice *dev;
+	char *s_nand0 = NULL, *s_nor0 = NULL;
+	static char parts[256];
+	static char ids[22];
+
+	if (!uclass_get_device(UCLASS_MTD, 0, &dev))
+		s_nand0 = env_get("mtdparts_nand0");
+
+	if (!uclass_get_device(UCLASS_SPI_FLASH, 0, &dev))
+		s_nor0 = env_get("mtdparts_nor0");
+
+	strcpy(ids, "");
+	strcpy(parts, "");
+	if (s_nand0 && s_nor0) {
+		snprintf(ids, sizeof(ids), "nor0=nor0,nand0=nand0");
+		snprintf(parts, sizeof(parts),
+			 "mtdparts=nor0:%s;nand0:%s", s_nor0, s_nand0);
+	} else if (s_nand0) {
+		snprintf(ids, sizeof(ids), "nand0=nand0");
+		snprintf(parts, sizeof(parts), "mtdparts=nand0:%s", s_nand0);
+	} else if (s_nor0) {
+		snprintf(ids, sizeof(ids), "nor0=nor0");
+		snprintf(parts, sizeof(parts), "mtdparts=nor0:%s", s_nor0);
+	}
+	*mtdids = ids;
+	*mtdparts = parts;
+	debug("%s:mtdids=%s & mtdparts=%s\n", __func__, ids, parts);
+}
+#endif
+
+#if defined(CONFIG_OF_BOARD_SETUP)
+int ft_board_setup(void *blob, bd_t *bd)
+{
+	ulong copro_rsc_addr, copro_rsc_size;
+	int off;
+	char *s_copro = NULL;
+#ifdef CONFIG_FDT_FIXUP_PARTITIONS
+	struct node_info nodes[] = {
+		{ "st,stm32f469-qspi",		MTD_DEV_TYPE_NOR,  },
+		{ "st,stm32mp15-fmc2",		MTD_DEV_TYPE_NAND, },
+	};
+	fdt_fixup_mtdparts(blob, nodes, ARRAY_SIZE(nodes));
+#endif
+
+	/* Update DT if coprocessor started */
+	off = fdt_path_offset(blob, "/m4");
+	if (off > 0) {
+		s_copro = env_get("copro_state");
+		copro_rsc_addr  = env_get_hex("copro_rsc_addr", 0);
+		copro_rsc_size  = env_get_hex("copro_rsc_size", 0);
+
+		if (s_copro) {
+			fdt_setprop_empty(blob, off, "early-booted");
+			if (copro_rsc_addr)
+				fdt_setprop_u32(blob, off, "rsc-address",
+						copro_rsc_addr);
+			if (copro_rsc_size)
+				fdt_setprop_u32(blob, off, "rsc-size",
+						copro_rsc_size);
+		} else {
+			fdt_delprop(blob, off, "early-booted");
+		}
+	}
+
+	return 0;
+}
+#endif
+
+void board_stm32copro_image_process(ulong fw_image, size_t fw_size)
+{
+	int ret, id = 0; /* Copro id fixed to 0 as only one coproc on mp1 */
+	unsigned int rsc_size;
+	ulong rsc_addr;
+
+	if (!rproc_is_initialized())
+		if (rproc_init()) {
+			printf("Remote Processor %d initialization failed\n",
+			       id);
+			return;
+		}
+
+	ret = rproc_load_rsc_table(id, fw_image, fw_size, &rsc_addr, &rsc_size);
+	if (!ret) {
+		env_set_hex("copro_rsc_addr", rsc_addr);
+		env_set_hex("copro_rsc_size", rsc_size);
+	}
+
+	ret = rproc_load(id, fw_image, fw_size);
+	printf("Load Remote Processor %d with data@addr=0x%08lx %u bytes:%s\n",
+	       id, fw_image, fw_size, ret ? " Failed!" : " Success!");
+
+	if (!ret) {
+		rproc_start(id);
+		env_set("copro_state", "booted");
+	}
+}
+
+U_BOOT_FIT_LOADABLE_HANDLER(IH_TYPE_STM32COPRO, board_stm32copro_image_process);
diff --git a/configs/stm32mp15_icorest_trusted_defconfig b/configs/stm32mp15_icorest_trusted_defconfig
new file mode 100644
index 0000000..355125d
--- /dev/null
+++ b/configs/stm32mp15_icorest_trusted_defconfig
@@ -0,0 +1,104 @@
+CONFIG_ARM=y
+CONFIG_ARCH_STM32MP=y
+CONFIG_SYS_MALLOC_F_LEN=0x3000
+CONFIG_TARGET_ICORE_STM32MP1=y
+CONFIG_DISTRO_DEFAULTS=y
+CONFIG_FIT=y
+CONFIG_SYS_PROMPT="STM32MP-i.Core> "
+# CONFIG_CMD_BOOTD is not set
+# CONFIG_CMD_ELF is not set
+# CONFIG_CMD_IMI is not set
+# CONFIG_CMD_XIMG is not set
+# CONFIG_CMD_EXPORTENV is not set
+# CONFIG_CMD_IMPORTENV is not set
+CONFIG_CMD_MEMINFO=y
+CONFIG_CMD_MEMTEST=y
+CONFIG_CMD_ADC=y
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DFU=y
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_REMOTEPROC=y
+CONFIG_CMD_SF=y
+CONFIG_CMD_USB=y
+CONFIG_CMD_USB_MASS_STORAGE=y
+CONFIG_CMD_BMP=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_TIME=y
+CONFIG_CMD_TIMER=y
+CONFIG_CMD_PMIC=y
+CONFIG_CMD_REGULATOR=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_MTDPARTS=y
+CONFIG_CMD_UBI=y
+CONFIG_DEFAULT_DEVICE_TREE="stm32mp157a-icorestm32-mx"
+CONFIG_STM32_ADC=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_FASTBOOT_BUF_ADDR=0xC0000000
+CONFIG_FASTBOOT_BUF_SIZE=0x02000000
+CONFIG_FASTBOOT_USB_DEV=1
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_FASTBOOT_FLASH_MMC_DEV=0
+CONFIG_DM_HWSPINLOCK=y
+CONFIG_HWSPINLOCK_STM32=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_STM32F7=y
+CONFIG_LED=y
+CONFIG_LED_GPIO=y
+CONFIG_DM_MAILBOX=y
+CONFIG_STM32_IPCC=y
+CONFIG_DM_MMC=y
+CONFIG_STM32_SDMMC2=y
+CONFIG_MTD=y
+CONFIG_NAND=y
+CONFIG_NAND_STM32_FMC2=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH=y
+CONFIG_SPI_FLASH_BAR=y
+CONFIG_SPI_FLASH_MACRONIX=y
+CONFIG_SPI_FLASH_SPANSION=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_SPI_FLASH_WINBOND=y
+# CONFIG_SPI_FLASH_USE_4K_SECTORS is not set
+CONFIG_SPI_FLASH_MTD=y
+CONFIG_PHY_FIXED=n
+CONFIG_DM_ETH=n
+CONFIG_DWC_ETH_QOS=n
+CONFIG_PHY=n
+CONFIG_PHY_STM32_USBPHYC=y
+CONFIG_PINCONF=y
+CONFIG_PINCTRL_STMFX=y
+CONFIG_DM_PMIC=y
+CONFIG_PMIC_STPMIC1=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_DM_REGULATOR_STM32_VREFBUF=y
+CONFIG_DM_REGULATOR_STPMIC1=y
+CONFIG_REMOTEPROC_STM32_COPRO=y
+CONFIG_SERIAL_RX_BUFFER=y
+CONFIG_SPI=y
+CONFIG_DM_SPI=y
+CONFIG_STM32_QSPI=y
+CONFIG_USB=y
+CONFIG_DM_USB=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_GENERIC=y
+CONFIG_USB_STORAGE=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_GADGET_MANUFACTURER="STMicroelectronics"
+CONFIG_USB_GADGET_VENDOR_NUM=0x0483
+CONFIG_USB_GADGET_PRODUCT_NUM=0x5720
+CONFIG_USB_GADGET_DWC2_OTG=y
+CONFIG_DM_VIDEO=y
+CONFIG_BACKLIGHT_GPIO=y
+CONFIG_VIDEO_LCD_ORISETECH_OTM8009A=y
+CONFIG_VIDEO_LCD_RAYDIUM_RM68200=y
+CONFIG_VIDEO_STM32=y
+CONFIG_VIDEO_STM32_DSI=y
+CONFIG_VIDEO_STM32_MAX_XRES=1280
+CONFIG_VIDEO_STM32_MAX_YRES=800
+CONFIG_STM32MP_WATCHDOG=y
+CONFIG_FDT_FIXUP_PARTITIONS=y
+# CONFIG_EFI_LOADER is not set
diff --git a/drivers/pinctrl/pinctrl-stmfx.c b/drivers/pinctrl/pinctrl-stmfx.c
index 9b5009a..e3d6d29 100644
--- a/drivers/pinctrl/pinctrl-stmfx.c
+++ b/drivers/pinctrl/pinctrl-stmfx.c
@@ -222,9 +222,8 @@ static int stmfx_pinctrl_conf_set(struct udevice *dev, unsigned int pin,
 {
 	int ret, dir;
 	struct stmfx_pinctrl *plat = dev_get_platdata(dev);
-
+while(1);
 	dir = stmfx_gpio_get_function(plat->gpio, pin);
-
 	if (dir < 0)
 		return dir;
 
diff --git a/include/configs/stm32mp1-icore.h b/include/configs/stm32mp1-icore.h
new file mode 100644
index 0000000..b56dbc7
--- /dev/null
+++ b/include/configs/stm32mp1-icore.h
@@ -0,0 +1,190 @@
+/* SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause */
+/*
+ * Copyright (C) 2018, STMicroelectronics - All Rights Reserved
+ *
+ * Configuration settings for the STM32MP15x CPU
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+#include <linux/sizes.h>
+#include <asm/arch/stm32.h>
+
+/*
+ * Number of clock ticks in 1 sec
+ */
+#define CONFIG_SYS_HZ				1000
+
+#ifndef CONFIG_STM32MP1_TRUSTED
+/* PSCI support */
+#define CONFIG_ARMV7_PSCI_1_0
+#define CONFIG_ARMV7_SECURE_BASE		STM32_SYSRAM_BASE
+#define CONFIG_ARMV7_SECURE_MAX_SIZE		STM32_SYSRAM_SIZE
+#endif
+
+/*
+ * malloc() pool size
+ */
+#define CONFIG_SYS_MALLOC_LEN			SZ_32M
+
+/*
+ * Configuration of the external SRAM memory used by U-Boot
+ */
+#define CONFIG_SYS_SDRAM_BASE			STM32_DDR_BASE
+#define CONFIG_SYS_INIT_SP_ADDR			CONFIG_SYS_TEXT_BASE
+
+#define CONFIG_DISABLE_CONSOLE
+
+/*
+ * Console I/O buffer size
+ */
+#define CONFIG_SYS_CBSIZE			SZ_1K
+
+/*
+ * Needed by "loadb"
+ */
+#define CONFIG_SYS_LOAD_ADDR			STM32_DDR_BASE
+
+/*
+ * Env parameters
+ */
+#define CONFIG_ENV_SIZE				SZ_4K
+
+/* ATAGs */
+#define CONFIG_CMDLINE_TAG
+#define CONFIG_SETUP_MEMORY_TAGS
+#define CONFIG_INITRD_TAG
+
+/* Extend size of kernel image for uncompression */
+#define CONFIG_SYS_BOOTM_LEN			SZ_32M
+
+/* SPL support */
+#ifdef CONFIG_SPL
+/* BOOTROM load address */
+#define CONFIG_SPL_TEXT_BASE		0x2FFC2500
+/* SPL use DDR */
+#define CONFIG_SPL_BSS_START_ADDR	0xC0200000
+#define CONFIG_SPL_BSS_MAX_SIZE		0x00100000
+#define CONFIG_SYS_SPL_MALLOC_START	0xC0300000
+#define CONFIG_SYS_SPL_MALLOC_SIZE	0x00100000
+
+/* limit SYSRAM usage to first 128 KB */
+#define CONFIG_SPL_MAX_SIZE		0x00020000
+#define CONFIG_SPL_STACK		(STM32_SYSRAM_BASE + \
+					 STM32_SYSRAM_SIZE)
+#endif /* #ifdef CONFIG_SPL */
+
+#define CONFIG_SYS_MEMTEST_START	STM32_DDR_BASE
+#define CONFIG_SYS_MEMTEST_END		(CONFIG_SYS_MEMTEST_START + SZ_64M)
+#define CONFIG_SYS_MEMTEST_SCRATCH	(CONFIG_SYS_MEMTEST_END + 4)
+
+/*MMC SD*/
+#define CONFIG_SYS_MMC_MAX_DEVICE	2
+
+/*****************************************************************************/
+#ifdef CONFIG_DISTRO_DEFAULTS
+/*****************************************************************************/
+
+/* NAND support */
+#define CONFIG_SYS_NAND_ONFI_DETECTION
+#define CONFIG_SYS_MAX_NAND_DEVICE	1
+
+/* SPI nand */
+#define CONFIG_SYS_MAX_NAND_DEVICE	1
+
+/* SPI FLASH support */
+#if defined(CONFIG_SPL_BUILD)
+#define CONFIG_SYS_SPI_U_BOOT_OFFS	0x80000
+#endif
+
+/* FILE SYSTEM */
+
+#if defined(CONFIG_STM32_QSPI) || defined(CONFIG_NAND_STM32_FMC2)
+/* Dynamic MTD partition support */
+#define CONFIG_SYS_MTDPARTS_RUNTIME
+#endif
+
+/* Ethernet need */
+#ifdef CONFIG_DWC_ETH_QOS
+#define CONFIG_SYS_NONCACHED_MEMORY	(1 * SZ_1M)	/* 1M */
+#define CONFIG_SERVERIP			192.168.1.1
+#define CONFIG_BOOTP_SERVERIP
+#define CONFIG_SYS_AUTOLOAD		"no"
+#endif
+
+#ifdef CONFIG_DM_VIDEO
+#define CONFIG_VIDEO_BMP_RLE8
+#define CONFIG_BMP_16BPP
+#define CONFIG_BMP_24BPP
+#define CONFIG_BMP_32BPP
+#endif
+
+#if !defined(CONFIG_SPL_BUILD)
+
+/* default order is eMMC (SDMMC 1)/ NAND / SDCARD (SDMMC 0) / SDMMC2 */
+#define BOOT_TARGET_DEVICES(func) \
+	func(MMC, mmc, 0) \
+	func(UBIFS, ubifs, 0) \
+	func(MMC, mmc, 1) \
+	func(MMC, mmc, 2) \
+	func(PXE, pxe, na)
+
+#include <config_distro_bootcmd.h>
+
+#define CONFIG_PREBOOT \
+	"echo \"Boot over ${boot_device}${boot_instance}!\"; " \
+	"if test ${boot_device} = serial; then " \
+		"stm32prog serial ${boot_instance}; " \
+	"else if test ${boot_device} = usb; then " \
+		"stm32prog usb ${boot_instance}; " \
+	"else " \
+		"if test ${boot_device} = mmc; then " \
+			"env set boot_targets \"mmc${boot_instance}\"; "\
+		"else if test ${boot_device} = nand; then " \
+			"env set boot_targets \"ubifs0\"; "\
+	"fi; fi; fi; fi;"
+
+#ifdef CONFIG_STM32MP1_OPTEE
+#define CONFIG_SYS_MEM_TOP_HIDE			SZ_32M
+/* with OPTEE: define specific MTD partitions = teeh, teed, teex */
+#define STM32MP_MTDPARTS \
+	"mtdparts_nor0=256k(fsbl1),256k(fsbl2),2m(ssbl),256k(logo),256k(teeh),256k(teed),256k(teex),-(nor_user)\0" \
+	"mtdparts_nand0=2m(fsbl),2m(ssbl1),2m(ssbl2),512k(teeh),512k(teed),512k(teex),-(UBI);\0"
+
+#else /* CONFIG_STM32MP1_OPTEE */
+
+#define STM32MP_MTDPARTS \
+	"mtdparts_nor0=256k(fsbl1),256k(fsbl2),2m(ssbl),256k(logo),-(nor_user)\0" \
+	"mtdparts_nand0=2m(fsbl),2m(ssbl1),2m(ssbl2),-(UBI)\0"
+
+#endif /* CONFIG_STM32MP1_OPTEE */
+
+/*
+ * memory layout for 32M uncompressed/compressed kernel,
+ * 1M fdt, 1M script, 1M pxe and 1M for splashimage
+ * and the ramdisk at the end.
+ */
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	"stdin=serial\0" \
+	"stdout=serial\0" \
+	"stderr=serial\0" \
+	"bootdelay=1\0" \
+	"kernel_addr_r=0xc2000000\0" \
+	"fdt_addr_r=0xc4000000\0" \
+	"scriptaddr=0xc4100000\0" \
+	"pxefile_addr_r=0xc4200000\0" \
+	"splashimage=0xc4300000\0"  \
+	"ramdisk_addr_r=0xc4400000\0" \
+	"fdt_high=0xffffffff\0" \
+	"initrd_high=0xffffffff\0" \
+	"bootlimit=0\0" \
+	"altbootcmd=run bootcmd\0" \
+	"usb_pgood_delay=2000\0" \
+	STM32MP_MTDPARTS \
+	BOOTENV \
+	"boot_net_usb_start=true\0"
+
+#endif /* ifndef CONFIG_SPL_BUILD */
+#endif /* ifdef CONFIG_DISTRO_DEFAULTS*/
+
+#endif /* __CONFIG_H */
-- 
2.17.1

