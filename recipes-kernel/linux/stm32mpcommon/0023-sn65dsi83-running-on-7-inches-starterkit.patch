From 81414669af93097b1f52002c43a17e16ae9a7ec6 Mon Sep 17 00:00:00 2001
From: Matteo Lisi <matteo.lisi@engicam.com>
Date: Mon, 13 May 2019 16:58:12 +0200
Subject: [PATCH] sn65dsi83-running-on-7-inches-starterkit

---
 .../dts/stm32mp157a-icorestm32-lvds-mx.dts    | 1155 +++++++++++++++++
 drivers/gpu/drm/bridge/Kconfig                |    2 +
 drivers/gpu/drm/bridge/Makefile               |    1 +
 drivers/gpu/drm/bridge/sn65dsi83/Kconfig      |    7 +
 drivers/gpu/drm/bridge/sn65dsi83/Makefile     |    2 +
 .../gpu/drm/bridge/sn65dsi83/sn65dsi83_brg.c  |  400 ++++++
 .../gpu/drm/bridge/sn65dsi83/sn65dsi83_brg.h  |   55 +
 .../gpu/drm/bridge/sn65dsi83/sn65dsi83_drv.c  |  473 +++++++
 .../drm/bridge/sn65dsi83/sn65dsi83_timing.h   |   33 +
 9 files changed, 2128 insertions(+)
 create mode 100644 arch/arm/boot/dts/stm32mp157a-icorestm32-lvds-mx.dts
 create mode 100644 drivers/gpu/drm/bridge/sn65dsi83/Kconfig
 create mode 100644 drivers/gpu/drm/bridge/sn65dsi83/Makefile
 create mode 100644 drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_brg.c
 create mode 100644 drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_brg.h
 create mode 100644 drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_drv.c
 create mode 100644 drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_timing.h

diff --git a/arch/arm/boot/dts/stm32mp157a-icorestm32-lvds-mx.dts b/arch/arm/boot/dts/stm32mp157a-icorestm32-lvds-mx.dts
new file mode 100644
index 000000000..33392c8c3
--- /dev/null
+++ b/arch/arm/boot/dts/stm32mp157a-icorestm32-lvds-mx.dts
@@ -0,0 +1,1155 @@
+/* SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause) */
+/*
+ * Copyright (C) STMicroelectronics 2019 - All Rights Reserved
+ * Author: STM32CubeMX code generation for STMicroelectronics.
+ */
+
+/dts-v1/;
+#include "stm32mp157c.dtsi"
+#include "stm32mp157c-m4-srm.dtsi"
+#include "stm32mp157caa-pinctrl.dtsi"
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/input/input.h>
+
+/* USER CODE BEGIN includes */
+#define ICORE_LVDS
+/* USER CODE END includes */
+
+/ {
+	model = "STMicroelectronics custom STM32CubeMX board";
+	compatible = "st,stm32mp157a-icorestm32-mx", "st,stm32mp157";
+
+    memory@c0000000 {
+        reg = <0xc0000000 0x20000000>;
+
+        /* USER CODE BEGIN memory */
+        /* USER CODE END memory */
+    };
+
+    reserved-memory {
+        #address-cells = <1>;
+        #size-cells = <1>;
+        ranges;
+
+        /* USER CODE BEGIN reserved-memory */
+
+		retram: retram@0x38000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x38000000 0x10000>;
+			no-map;
+		};
+
+		mcuram: mcuram@0x30000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x30000000 0x40000>;
+			no-map;
+		};
+
+		mcuram2: mcuram2@0x10000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10000000 0x40000>;
+			no-map;
+		};
+
+		vdev0vring0: vdev0vring0@10040000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10040000 0x2000>;
+			no-map;
+		};
+
+		vdev0vring1: vdev0vring1@10042000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10042000 0x2000>;
+			no-map;
+		};
+
+		vdev0buffer: vdev0buffer@10044000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10044000 0x4000>;
+			no-map;
+		};
+
+        /* USER CODE END reserved-memory */
+
+        gpu_reserved: gpu@dc000000 {
+            reg = <0xdc000000 0x4000000>;
+            no-map;
+        };
+    };
+
+	vddcore: regulator-vddcore {
+		compatible = "regulator-fixed";
+		regulator-name = "vddcore";
+		regulator-min-microvolt = <1200000>;
+		regulator-max-microvolt = <1200000>;
+		regulator-always-on;
+	};
+
+	vdd: regulator-vdd {
+		compatible = "regulator-fixed";
+		regulator-name = "vdd";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		regulator-always-on;
+	};
+
+	vdd_usb: regulator-vdd_usb {
+		compatible = "regulator-fixed";
+		regulator-name = "vdd_usb";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		regulator-always-on;
+	};
+
+	vdda: regulator-vdda {
+		compatible = "regulator-fixed";
+		regulator-name = "vdda";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		regulator-always-on;
+	};
+
+	vdd_ddr: regulator-vdd_ddr {
+		compatible = "regulator-fixed";
+		regulator-name = "vdd_ddr";
+		regulator-min-microvolt = <1350000>;
+		regulator-max-microvolt = <1350000>;
+		regulator-always-on;
+	};
+
+	vtt_ddr: regulator-vtt_ddr {
+		compatible = "regulator-fixed";
+		regulator-name = "vtt_ddr";
+		regulator-min-microvolt = <675000>;
+		regulator-max-microvolt = <675000>;
+		regulator-always-on;
+		vin-supply = <&vdd>;
+	};
+
+	vref_ddr: regulator-vref_ddr {
+		compatible = "regulator-fixed";
+		regulator-name = "vref_ddr";
+		regulator-min-microvolt = <675000>;
+		regulator-max-microvolt = <675000>;
+		regulator-always-on;
+		vin-supply = <&vdd>;
+	};
+
+	vdd_sd: regulator-vdd_sd {
+		compatible = "regulator-fixed";
+		regulator-name = "vdd_sd";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		regulator-always-on;
+	};
+
+	v3v3: regulator-v3v3 {
+		compatible = "regulator-fixed";
+		regulator-name = "v3v3";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		regulator-always-on;
+	};
+
+	v2v8: regulator-v2v8 {
+		compatible = "regulator-fixed";
+		regulator-name = "v2v8";
+		regulator-min-microvolt = <2800000>;
+		regulator-max-microvolt = <2800000>;
+		regulator-always-on;
+		vin-supply = <&v3v3>;
+	};
+
+	v1v8: regulator-v1v8 {
+		compatible = "regulator-fixed";
+		regulator-name = "v1v8";
+		regulator-min-microvolt = <1800000>;
+		regulator-max-microvolt = <1800000>;
+		regulator-always-on;
+		vin-supply = <&v3v3>;
+	};
+
+	lcd_3v3: regulator-lcd_3v3 {
+		compatible = "regulator-fixed";
+		regulator-name = "lcd_3v3";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		gpio = <&gpiof 10 0>;
+		enable-active-high;
+		regulator-always-on;
+	};
+
+	/* USER CODE BEGIN root */
+	
+	sram: sram@10050000 {
+		compatible = "mmio-sram";
+		reg = <0x10050000 0x10000>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges = <0 0x10050000 0x10000>;
+
+		dma_pool: dma_pool@0 {
+			reg = <0x0 0x10000>;
+			pool;
+		};
+	};
+	
+    aliases {
+		ethernet0 = &ethernet0;
+		serial0 = &uart4;
+		serial1 = &uart8;
+		serial2 = &usart3;
+		serial3 = &uart7;
+		serial4 = &usart1;		
+	};
+
+	usb_phy_tuning: usb-phy-tuning {
+		st,hs-dc-level = <2>;
+		st,fs-rftime-tuning;
+		st,hs-rftime-reduction;
+		st,hs-current-trim = <15>;
+		st,hs-impedance-trim = <1>;
+		st,squelch-level = <3>;
+		st,hs-rx-offset = <2>;
+		st,no-lsfs-sc;
+	};
+	
+	led {
+		compatible = "gpio-leds";
+		blue {
+			label = "usb_hub";
+			gpios = <&gpioi 1 GPIO_ACTIVE_HIGH>;
+			default-state = "on";
+		};
+	};
+	
+	/* USER CODE END root */
+
+    clocks {
+        /* USER CODE BEGIN clocks */
+        /* USER CODE END clocks */
+
+        clk_lsi: clk-lsi {
+            clock-frequency = <32000>;
+        };
+        clk_hsi: clk-hsi {
+            clock-frequency = <64000000>;
+        };
+        clk_csi: clk-csi {
+            clock-frequency = <4000000>;
+        };
+        clk_hse: clk-hse {
+            clock-frequency = <24000000>;
+        };
+
+        clk_mrclk: clk-mrclk {
+            #clock-cells = <0>;
+            compatible = "fixed-clock";
+            clock-frequency = <31000000>;
+        };
+    };
+
+#ifndef ICORE_LVDS
+    panel_rgb: panel-rgb {
+		compatible = "auo,b101aw03";
+		status = "okay";
+		port {
+			panel_in_rgb: endpoint {
+				remote-endpoint = <&ltdc_out_rgb>;
+			};
+		};
+	};
+#endif
+	
+    panel_backlight: panel-backlight {
+            compatible = "gpio-backlight";
+            gpios = <&gpiod 13 GPIO_ACTIVE_HIGH>;
+            default-on;
+            status = "okay";
+    };
+
+    sound {
+		compatible = "simple-audio-card";
+		simple-audio-card,name = "stm32mp1-icore-sgtl5000";
+		simple-audio-card,format = "i2s";
+		simple-audio-card,bitclock-master = <&dailink_master>;
+		simple-audio-card,frame-master = <&dailink_master>;
+		simple-audio-card,widgets =
+			"Microphone", "Mic Jack",
+			"Line", "Line In",
+			"Line", "Line Out",
+			"Headphone", "Headphone Jack";
+		simple-audio-card,routing =
+			"MIC_IN", "Mic Jack",
+			"Mic Jack", "Mic Bias",
+			"Headphone Jack", "HP_OUT";
+
+		simple-audio-card,cpu {
+			sound-dai = <&sai2a>;
+		};	
+
+        dailink_master: simple-audio-card,codec {
+			sound-dai = <&codec>;
+			clocks = <&rcc SAI2>;
+		};
+	};
+}; 
+
+
+/*root*/
+
+&pinctrl {
+    u-boot,dm-pre-reloc;
+
+    eth1_pins_mx: eth1_mx-0 {
+				pins {
+					pinmux =  <STM32_PINMUX('A', 1, AF0)>, /* ETH_CLK */
+						 <STM32_PINMUX('A', 2, AF11)>, /* ETH_MDIO */
+						 <STM32_PINMUX('C', 1, AF11)>, /* ETH_MDC */
+						 <STM32_PINMUX('A', 7, AF11)>, /* ETH_RX_DV */
+						 <STM32_PINMUX('B', 11, AF11)>, /* ETH_TX_EN */
+						 <STM32_PINMUX('C', 4, AF11)>, /* ETH_RX_D0 */
+						 <STM32_PINMUX('C', 5, AF11)>, /* ETH_RX_D1 */
+						 <STM32_PINMUX('G', 13, AF11)>, /* ETH_TX_D0 */
+						 <STM32_PINMUX('G', 14, AF11)>; /* ETH_TX_D1 */
+					bias-disable;
+					drive-push-pull;
+					slew-rate = <3>;
+				};
+/*				
+				pins2 {
+                    pinmux = <STM32_PINMUX('D', 10, GPIO)>;
+                    bias-pull-up;
+                    drive-push-pull;
+                    output-high;
+                    slew-rate = <0>;
+                };
+*/
+    };
+
+
+    fdcan1_pins_mx: fdcan1_mx-0 {
+        pins1 {
+            pinmux = <STM32_PINMUX('H', 13, AF9)>; /* FDCAN1_TX */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <0>;
+        };
+        pins2 {
+            pinmux = <STM32_PINMUX('H', 14, AF9)>; /* FDCAN1_RX */
+            bias-disable;
+        };
+    };
+    fmc_pins_mx: fmc_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins1 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('D', 0, AF12)>, /* FMC_D2 */
+                     <STM32_PINMUX('D', 1, AF12)>, /* FMC_D3 */
+                     <STM32_PINMUX('D', 4, AF12)>, /* FMC_NOE */
+                     <STM32_PINMUX('D', 5, AF12)>, /* FMC_NWE */
+                     <STM32_PINMUX('D', 11, AF12)>, /* FMC_CLE */
+                     <STM32_PINMUX('D', 12, AF12)>, /* FMC_ALE */
+                     <STM32_PINMUX('D', 14, AF12)>, /* FMC_D0 */
+                     <STM32_PINMUX('D', 15, AF12)>, /* FMC_D1 */
+                     <STM32_PINMUX('E', 7, AF12)>, /* FMC_D4 */
+                     <STM32_PINMUX('E', 8, AF12)>, /* FMC_D5 */
+                     <STM32_PINMUX('E', 9, AF12)>, /* FMC_D6 */
+                     <STM32_PINMUX('E', 10, AF12)>, /* FMC_D7 */
+                     <STM32_PINMUX('G', 9, AF12)>; /* FMC_NCE */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <1>;
+        };
+        pins2 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('D', 6, AF12)>; /* FMC_NWAIT */
+            bias-disable;
+        };
+    };
+    i2c2_pins_mx: i2c2_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('H', 4, AF4)>, /* I2C2_SCL */
+                     <STM32_PINMUX('H', 5, AF4)>; /* I2C2_SDA */
+            bias-disable;
+            drive-open-drain;
+            slew-rate = <0>;
+        };
+    };
+
+    sai2a_pins_mx: sai2a_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('E', 0, AF10)>, /* SAI2_MCLK_A */
+                     <STM32_PINMUX('I', 5, AF10)>, /* SAI2_SCK_A */
+                     <STM32_PINMUX('I', 6, AF10)>, /* SAI2_SD_A */
+                     <STM32_PINMUX('I', 7, AF10)>; /* SAI2_FS_A */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <0>;
+        };
+    };
+    sai2b_pins_mx: sai2b_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('C', 0, AF8)>, /* SAI2_FS_B */
+                     <STM32_PINMUX('E', 6, AF10)>, /* SAI2_MCLK_B */
+                     <STM32_PINMUX('F', 11, AF10)>, /* SAI2_SD_B */
+                     <STM32_PINMUX('H', 2, AF10)>; /* SAI2_SCK_B */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <0>;
+        };
+    };
+    sdmmc1_pins_mx: sdmmc1_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins1 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
+                     <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
+                     <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
+                     <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
+                     <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <1>;
+        };
+        pins2 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <3>;
+        };
+    };
+    sdmmc2_pins_mx: sdmmc2_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins1 {
+            u-boot,dm-pre-reloc;
+					pinmux = <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
+						 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
+						 <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
+						 <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
+						 <STM32_PINMUX('E', 3, AF9)>, /* SDMMC2_CK */
+						 <STM32_PINMUX('G', 6, AF10)>, /* SDMMC2_CMD */
+						 <STM32_PINMUX('A', 8, AF9)>, /* SDMMC2_D4 */
+						 <STM32_PINMUX('A', 9, AF10)>, /* SDMMC2_D5 */
+						 <STM32_PINMUX('E', 5, AF9)>, /* SDMMC2_D6 */
+						 <STM32_PINMUX('D', 3, AF9)>; /* SDMMC2_D7 */
+					slew-rate = <3>;
+					drive-push-pull;
+					bias-pull-up;
+        };
+        pins2 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <3>;
+        };
+    };
+    uart4_pins_mx: uart4_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins1 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('G', 11, AF6)>; /* UART4_TX */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <0>;
+        };
+        pins2 {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('B', 2, AF8)>; /* UART4_RX */
+            bias-disable;
+        };
+    };
+
+    eth1_sleep_pins_mx: eth1_sleep_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ETH1_CLK */
+                     <STM32_PINMUX('A', 2, ANALOG)>, /* ETH1_MDIO */
+                     <STM32_PINMUX('A', 7, ANALOG)>, /* ETH1_CRS_DV */
+                     <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_EN */
+                     <STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_MDC */
+                     <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
+                     <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
+                     <STM32_PINMUX('G', 8, ANALOG)>, /* ETH1_PPS_OUT */
+                     <STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
+                     <STM32_PINMUX('G', 14, ANALOG)>; /* ETH1_TXD1 */
+        };
+    };
+    fdcan1_sleep_pins_mx: fdcan1_sleep_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('H', 13, ANALOG)>, /* FDCAN1_TX */
+                     <STM32_PINMUX('H', 14, ANALOG)>; /* FDCAN1_RX */
+        };
+    };
+    fmc_sleep_pins_mx: fmc_sleep_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('D', 0, ANALOG)>, /* FMC_D2 */
+                     <STM32_PINMUX('D', 1, ANALOG)>, /* FMC_D3 */
+                     <STM32_PINMUX('D', 4, ANALOG)>, /* FMC_NOE */
+                     <STM32_PINMUX('D', 5, ANALOG)>, /* FMC_NWE */
+                     <STM32_PINMUX('D', 6, ANALOG)>, /* FMC_NWAIT */
+                     <STM32_PINMUX('D', 11, ANALOG)>, /* FMC_CLE */
+                     <STM32_PINMUX('D', 12, ANALOG)>, /* FMC_ALE */
+                     <STM32_PINMUX('D', 14, ANALOG)>, /* FMC_D0 */
+                     <STM32_PINMUX('D', 15, ANALOG)>, /* FMC_D1 */
+                     <STM32_PINMUX('E', 7, ANALOG)>, /* FMC_D4 */
+                     <STM32_PINMUX('E', 8, ANALOG)>, /* FMC_D5 */
+                     <STM32_PINMUX('E', 9, ANALOG)>, /* FMC_D6 */
+                     <STM32_PINMUX('E', 10, ANALOG)>, /* FMC_D7 */
+                     <STM32_PINMUX('G', 9, ANALOG)>; /* FMC_NCE */
+        };
+    };
+    i2c2_sleep_pins_mx: i2c2_sleep_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('H', 4, ANALOG)>, /* I2C2_SCL */
+                     <STM32_PINMUX('H', 5, ANALOG)>; /* I2C2_SDA */
+        };
+    };
+
+    sai2a_sleep_pins_mx: sai2a_sleep_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('E', 0, ANALOG)>, /* SAI2_MCLK_A */
+                     <STM32_PINMUX('I', 5, ANALOG)>, /* SAI2_SCK_A */
+                     <STM32_PINMUX('I', 6, ANALOG)>, /* SAI2_SD_A */
+                     <STM32_PINMUX('I', 7, ANALOG)>; /* SAI2_FS_A */
+        };
+    };
+    sai2b_sleep_pins_mx: sai2b_sleep_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('C', 0, ANALOG)>, /* SAI2_FS_B */
+                     <STM32_PINMUX('E', 6, ANALOG)>, /* SAI2_MCLK_B */
+                     <STM32_PINMUX('F', 11, ANALOG)>, /* SAI2_SD_B */
+                     <STM32_PINMUX('H', 2, ANALOG)>; /* SAI2_SCK_B */
+        };
+    };
+    sdmmc1_sleep_pins_mx: sdmmc1_sleep_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* SDMMC1_D0 */
+                     <STM32_PINMUX('C', 9, ANALOG)>, /* SDMMC1_D1 */
+                     <STM32_PINMUX('C', 10, ANALOG)>, /* SDMMC1_D2 */
+                     <STM32_PINMUX('C', 11, ANALOG)>, /* SDMMC1_D3 */
+                     <STM32_PINMUX('C', 12, ANALOG)>, /* SDMMC1_CK */
+                     <STM32_PINMUX('D', 2, ANALOG)>; /* SDMMC1_CMD */
+        };
+    };
+    sdmmc2_sleep_pins_mx: sdmmc2_sleep_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('A', 8, ANALOG)>, /* SDMMC2_D4 */
+                     <STM32_PINMUX('A', 9, ANALOG)>, /* SDMMC2_D5 */
+                     <STM32_PINMUX('B', 3, ANALOG)>, /* SDMMC2_D2 */
+                     <STM32_PINMUX('B', 4, ANALOG)>, /* SDMMC2_D3 */
+                     <STM32_PINMUX('B', 14, ANALOG)>, /* SDMMC2_D0 */
+                     <STM32_PINMUX('B', 15, ANALOG)>, /* SDMMC2_D1 */
+                     <STM32_PINMUX('D', 3, ANALOG)>, /* SDMMC2_D7 */
+                     <STM32_PINMUX('E', 3, ANALOG)>, /* SDMMC2_CK */
+                     <STM32_PINMUX('E', 5, ANALOG)>, /* SDMMC2_D6 */
+                     <STM32_PINMUX('G', 6, ANALOG)>; /* SDMMC2_CMD */
+        };
+    };
+    uart4_sleep_pins_mx: uart4_sleep_mx-0 {
+        u-boot,dm-pre-reloc;
+        pins {
+            u-boot,dm-pre-reloc;
+            pinmux = <STM32_PINMUX('B', 2, ANALOG)>, /* UART4_RX */
+                     <STM32_PINMUX('G', 11, ANALOG)>; /* UART4_TX */
+        };
+    };
+
+    pinctrl_edt_ft5x26: pinctrl_edt_ft5x26-0 {
+            pins {
+			pinmux = <STM32_PINMUX('H', 10, GPIO)>;
+		};
+	};	
+
+
+    pinctrl_bridge_lvds: pinctrl_bridge_lvds-0 {
+            pins {
+			pinmux = <STM32_PINMUX('F', 12, GPIO)>,
+			 <STM32_PINMUX('F', 15, GPIO)>;
+		};
+	};	
+	 
+    lcd_pins_icore: lcd-0 {
+        pins {
+            pinmux = <STM32_PINMUX('I', 12,  AF14)>,/* LCD_HSYNC */
+                    <STM32_PINMUX('I', 13,  AF14)>,/* LCD_VSYNC */
+                    <STM32_PINMUX('I', 14,  AF14)>,/* LCD_PIXCLK */
+                    <STM32_PINMUX('I', 15,  AF14)>,/* LCD_R0 */
+                    <STM32_PINMUX('J', 0,  AF14)>,/* LCD_R1 */
+                    <STM32_PINMUX('J', 1,  AF14)>,/* LCD_R2 */
+                    <STM32_PINMUX('J', 2,  AF14)>,/* LCD_R3 */
+                    <STM32_PINMUX('J', 3,  AF14)>,/* LCD_R4 */
+                    <STM32_PINMUX('J', 4,  AF14)>,/* LCD_R5 */
+                    <STM32_PINMUX('J', 5,  AF14)>,/* LCD_R6 */
+                    <STM32_PINMUX('J', 6,  AF14)>,/* LCD_R7 */
+                    <STM32_PINMUX('J', 7,  AF14)>,/* LCD_G0 */
+                    <STM32_PINMUX('J', 8,  AF14)>,/* LCD_G1 */
+                    <STM32_PINMUX('J', 9,  AF14)>,/* LCD_G2 */
+                    <STM32_PINMUX('J', 10,  AF14)>,/* LCD_G3 */
+                    <STM32_PINMUX('J', 11,  AF14)>,/* LCD_G4 */
+                    <STM32_PINMUX('J', 12,  AF14)>,/* LCD_B0 */
+                    <STM32_PINMUX('J', 13,  AF14)>,/* LCD_B1 */
+                    <STM32_PINMUX('J', 14,  AF14)>,/* LCD_B2 */
+                    <STM32_PINMUX('J', 15,  AF14)>,/* LCD_B3 */
+                    <STM32_PINMUX('K', 0,  AF14)>,/* LCD_G5 */
+                    <STM32_PINMUX('K', 1,  AF14)>,/* LCD_G6 */
+                    <STM32_PINMUX('K', 2,  AF14)>,/* LCD_G7 */
+                    <STM32_PINMUX('K', 3,  AF14)>,/* LCD_B4 */
+                    <STM32_PINMUX('K', 4,  AF14)>,/* LCD_B5 */
+                    <STM32_PINMUX('K', 5,  AF14)>,/* LCD_B6 */
+                    <STM32_PINMUX('K', 6,  AF14)>,/* LCD_B7 */
+                    <STM32_PINMUX('K', 7,  AF14)>;/* LCD_DE */
+            bias-disable;
+            drive-push-pull;
+            slew-rate = <3>;
+        };
+    };
+};
+
+&pinctrl_z {
+    u-boot,dm-pre-reloc;
+    i2c6_pins_z_mx: i2c6_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('Z', 7, AF2)>, /* I2C6_SDA */
+                     <STM32_PINMUX('Z', 6, AF2)>; /* I2C6_SCL */
+            bias-disable;
+            drive-open-drain;
+            slew-rate = <0>;
+        };
+    };
+    i2c6_sleep_pins_z_mx: i2c6_sleep_mx-0 {
+        pins {
+            pinmux = <STM32_PINMUX('Z', 7, ANALOG)>, /* I2C6_SDA */
+                     <STM32_PINMUX('Z', 6, ANALOG)>; /* I2C6_SCL */
+        };
+    };
+};
+
+&m4_rproc{
+    recovery;
+    status = "okay";
+
+    /* USER CODE BEGIN m4_rproc */
+    /* USER CODE END m4_rproc */
+};
+
+&bsec{
+    status = "okay";
+
+    /* USER CODE BEGIN bsec */
+    /* USER CODE END bsec */
+};
+
+
+&fmc{
+    u-boot,dm-pre-reloc;
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&fmc_pins_mx>;
+    pinctrl-1 = <&fmc_sleep_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN fmc */
+    /* USER CODE END fmc */
+};
+
+&gpu{
+    status = "okay";
+
+    /* USER CODE BEGIN gpu */
+    /* USER CODE END gpu */
+};
+
+&i2c2 {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&i2c2_pins_a>;
+	pinctrl-1 = <&i2c2_pins_sleep_a>;
+	i2c-scl-rising-time-ns = <185>;
+	i2c-scl-falling-time-ns = <20>;
+	status = "okay";
+	/delete-property/dmas;
+	/delete-property/dma-names;
+
+	polytouch: edt-ft5x26@38 {
+		compatible = "edt,edt-ft5526";
+		reg = <0x38>;
+		pinctrl-names = "default";		
+		pinctrl-0 = <&pinctrl_edt_ft5x26>;
+		interrupt-parent = <&gpioh>;
+		interrupts = <10 0>;	
+    };
+
+	codec: sgtl5000@a {
+		compatible = "fsl,sgtl5000";
+		#sound-dai-cells = <0>;
+		reg = <0x0a>;
+		status = "okay";
+        clocks = <&clk_mrclk>;
+
+		VDDA-supply = <&v3v3>;
+		VDDIO-supply = <&v3v3>;
+		
+		ports {
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			sgtl5000_tx_port: port-0 {
+                	reg = <0>;
+				sgtl5000_tx_endpoint: endpoint {
+					remote-endpoint = <&sai2a_endpoint>;
+				};
+			};
+
+			sgtl5000_rx_port: port@1 {
+                	reg = <1>;
+				sgtl5000_rx_endpoint: endpoint {
+					remote-endpoint = <&sai2b_endpoint>;
+				};
+			};
+		};
+	};
+};
+
+&i2c6{
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&i2c6_pins_z_mx>;
+    pinctrl-1 = <&i2c6_sleep_pins_z_mx>;
+	i2c-scl-rising-time-ns = <185>;
+	i2c-scl-falling-time-ns = <20>;
+	status = "okay";
+	/delete-property/dmas;
+	/delete-property/dma-names;
+
+    /* USER CODE BEGIN i2c6 */
+    lvds_bridge: sn65dsi83@2c {
+        compatible = "ti,sn65dsi83";
+        reg = <0x2c>;
+        ti,dsi-lanes = <2>;
+        ti,lvds-format = <2>;
+        ti,lvds-bpp = <24>;
+        ti,width-mm = <149>;
+        ti,height-mm = <93>;
+		enable-gpios = <&gpiof 15  GPIO_ACTIVE_HIGH>;
+//        pinctrl-names = "default";
+//        pinctrl-0 = <&pinctrl_bridge_lvds>;
+        status = "okay";
+
+       display-timings {
+            lvds {
+                clock-frequency = <45000000>;
+                hactive = <1024>;
+                vactive = <600>;
+                hback-porch = <6>;
+                hfront-porch = <5>;
+                vback-porch = <2>;
+                vfront-porch = <3>;
+                hsync-len = <2>;
+                vsync-len = <1>;
+                hsync-active = <0>;
+                vsync-active = <0>;
+                de-active = <1>;
+                pixelclk-active = <0>;
+            };
+        };
+
+        port {
+            sn65dsi83_in: endpoint {
+                remote-endpoint = <&dsim_to_sn65dsi8>;
+            };
+        };
+    };
+
+    /* USER CODE END i2c6 */
+};
+
+
+&m_can1{
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&fdcan1_pins_mx>;
+    pinctrl-1 = <&fdcan1_sleep_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN m_can1 */
+    /* USER CODE END m_can1 */
+};
+
+&iwdg2{
+    status = "okay";
+
+    /* USER CODE BEGIN iwdg2 */
+    /* USER CODE END iwdg2 */
+};
+
+
+&rcc{
+    u-boot,dm-pre-reloc;
+    status = "okay";
+
+    /* USER CODE BEGIN rcc */
+    /* USER CODE END rcc */
+};
+
+&rtc{
+    status = "okay";
+
+    /* USER CODE BEGIN rtc */
+    /* USER CODE END rtc */
+};
+
+#ifdef ICORE_LVDS
+&dsi {
+	#address-cells = <1>;
+	#size-cells = <0>;
+	status = "okay";
+
+	ports {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		port@0 {
+			reg = <0>;
+			dsi_in: endpoint {
+				remote-endpoint = <&ltdc_ep1_out>;
+			};
+		};
+
+
+		port@1 {
+			reg = <1>;
+			dsim_to_sn65dsi8: endpoint {
+				remote-endpoint = <&sn65dsi83_in>;
+			};
+		};
+
+/*
+		port@1 {
+			reg = <1>;
+			dsi_out: endpoint {
+				remote-endpoint = <&panel_in>;
+			};
+		};
+*/
+
+	};
+
+/*
+	panel@0 {
+		compatible = "orisetech,otm8009a";
+		reg = <0>;
+		reset-gpios = <&gpioe 4 GPIO_ACTIVE_LOW>;
+		status = "okay";
+
+		port {
+			panel_in: endpoint {
+				remote-endpoint = <&dsi_out>;
+			};
+		};
+	};
+*/
+
+};
+
+
+&ltdc {
+	status = "okay";
+
+    backlight = <&panel_backlight>;
+
+	port {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		ltdc_ep1_out: endpoint@1 {
+			reg = <1>;
+			remote-endpoint = <&dsi_in>;
+		};
+	};
+};
+#else
+/* RGB output */
+&ltdc {
+	status = "okay";
+	pinctrl-0 = <&lcd_pins_icore>;
+	pinctrl-names = "default";
+	
+    backlight = <&panel_backlight>;
+
+	port {
+        #address-cells = <1>;
+		#size-cells = <0>;
+		
+		ltdc_out_rgb: endpoint@0 {
+            reg = <0>;
+			remote-endpoint = <&panel_in_rgb>;
+		};
+	};
+};
+#endif
+
+&sai2 {
+	clocks = <&rcc SAI2>, <&rcc PLL3_Q>, <&rcc PLL4_Q>;
+	clock-names = "pclk", "x8k", "x11k";
+	status = "okay";
+    frame-master;
+    bitclock-master;
+	sai2a: audio-controller@4400b004 {
+		pinctrl-names = "default";
+		pinctrl-0 = <&sai2a_pins_a>;
+		dma-names = "tx";
+		status = "okay";
+		
+		sai2a_port: port@0 {
+			sai2a_endpoint: endpoint {
+				remote-endpoint = <&sgtl5000_tx_endpoint>;
+				format = "i2s";
+				mclk-fs = <256>;
+			};
+		};
+	};
+
+	sai2b: audio-controller@4400b024 {
+		pinctrl-names = "default";
+		pinctrl-0 = <&sai2b_pins_a>;
+		dma-names = "rx";
+		st,sync = <&sai2a 2>;
+		status = "okay";
+
+		sai2b_port: port@0 {
+			sai2b_endpoint: endpoint {
+				remote-endpoint = <&sgtl5000_rx_endpoint>;
+				format = "i2s";
+				mclk-fs = <256>;
+			};
+		};
+	};
+};
+&sdmmc1{
+    u-boot,dm-pre-reloc;
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&sdmmc1_pins_mx>;
+    pinctrl-1 = <&sdmmc1_sleep_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN sdmmc1 */
+    broken-cd;
+	st,neg-edge;
+	bus-width = <4>;
+	max-frequency = <10000000>;
+	vmmc-supply = <&v3v3>;
+    /* USER CODE END sdmmc1 */
+};
+
+&sdmmc2{
+    u-boot,dm-pre-reloc;
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&sdmmc2_pins_mx>;
+    pinctrl-1 = <&sdmmc2_sleep_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN sdmmc2 */  
+    non-removable;
+	no-sd;
+	no-sdio;
+	st,dirpol;
+	st,negedge;
+	bus-width = <8>;
+	vmmc-supply = <&v3v3>;
+	vqmmc-supply = <&v3v3>;
+    /* USER CODE END sdmmc2 */
+};
+
+&uart4{
+    u-boot,dm-pre-reloc;
+    pinctrl-names = "default", "sleep";
+    pinctrl-0 = <&uart4_pins_mx>;
+    pinctrl-1 = <&uart4_sleep_pins_mx>;
+    status = "okay";
+
+    /* USER CODE BEGIN uart4 */
+    /* USER CODE END uart4 */
+};
+
+&usbh_ehci{
+    status = "okay";
+
+    /* USER CODE BEGIN usbh_ehci */
+    /* USER CODE END usbh_ehci */
+};
+
+&usbh_ohci{
+    status = "okay";
+
+    /* USER CODE BEGIN usbh_ohci */
+    /* USER CODE END usbh_ohci */
+};
+
+
+&usbphyc{
+    u-boot,dm-pre-reloc;
+    status = "okay";
+
+    /* USER CODE BEGIN usbphyc */
+    /* USER CODE END usbphyc */
+};
+
+&usbphyc_port0{
+    u-boot,dm-pre-reloc;
+    status = "okay";
+
+    /* USER CODE BEGIN usbphyc_port0 */
+    /* USER CODE END usbphyc_port0 */
+};
+
+&usbphyc_port1{
+    u-boot,dm-pre-reloc;
+    status = "okay";
+
+    /* USER CODE BEGIN usbphyc_port1 */
+    /* USER CODE END usbphyc_port1 */
+};
+
+/* USER CODE BEGIN addons */
+
+
+&ethernet0 {
+    pinctrl-names = "default";
+    pinctrl-0 = <&eth1_pins_mx>;
+	phy-mode = "rmii";
+	max-speed = <100>;
+	phy-handle = <&phy0>;
+	snps,ps-speed = <100>;
+    st,eth_ref_clk_sel;
+	status = "okay";
+
+    clock-names = "stmmaceth",
+                "mac-clk-tx",
+                "mac-clk-rx",
+                "ethstp",
+                "syscfg-clk",
+                "eth-ck";
+
+    clocks = <&rcc ETHMAC>,
+            <&rcc ETHTX>,
+            <&rcc ETHRX>,
+            <&rcc ETHSTP>,
+            <&rcc SYSCFG>,
+            <&rcc ETHCK_K>;
+
+	snps,reset-gpio = <&gpiod 10 GPIO_ACTIVE_LOW>;
+    snps,reset-delays-us = <25>;
+    snps,reset-active-low;
+
+    mdio0 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "snps,dwmac-mdio";
+
+		phy0: ethernet-phy-0 {
+			reg = <0>;
+		};
+	};
+};
+
+&usbh_ehci {
+	phys = <&usbphyc_port0>;
+	phy-names = "usb";
+	status = "okay";
+};
+
+&usbotg_hs {
+	dr_mode = "peripheral";
+	force-b-session-valid;
+	phys = <&usbphyc_port1 0>;
+	phy-names = "usb2-phy";
+	status = "okay";
+};
+
+&fmc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&fmc_pins_a>;
+	status = "okay";
+	#address-cells = <1>;
+	#size-cells = <0>;
+
+	nand: nand@0 {
+		reg = <0>;
+		nand-on-flash-bbt;
+		#address-cells = <1>;
+		#size-cells = <1>;
+		
+        partition@0 {
+            label = "nand-boot";
+            reg = <0x00000000 0x01400000>;
+        };
+
+        partition@1400000 {
+            label = "nand-fs";
+            reg = <0x01400000 0x1e000000>;
+        };
+	};
+};
+
+
+&adc {
+	/* ANA0, ANA1 are dedicated pins and don't need pinctrl: only in6. */
+	vdd-supply = <&vdd>;
+	vdda-supply = <&vdda>;
+	vref-supply = <&vdda>;
+	status = "okay";
+	adc1: adc@0 {
+		st,adc-channels = <0 1>;
+		/* 16.5 ck_cycles sampling time */
+		st,min-sample-time-nsecs = <400>;
+		status = "okay";
+	};
+	jadc1: jadc@0 {
+		st,adc-channels = <0 1>;
+		/* 16.5 ck_cycles sampling time */
+		st,min-sample-time-nsecs = <400>;
+		status = "okay";
+	};
+	/* temperature sensor on adc2 */
+	adc2: adc@100 {
+		status = "okay";
+	};
+	adc_temp: temp {
+		status = "okay";
+	};
+};
+
+&dts {
+	status = "okay";
+};
+
+&pwr {
+	status = "okay";
+};
+
+&vrefbuf {
+	regulator-min-microvolt = <2500000>;
+	regulator-max-microvolt = <2500000>;
+	vdda-supply = <&vdd>;
+	status = "okay";
+};
+
+
+&gpu {
+	contiguous-area = <&gpu_reserved>;
+	status = "okay";
+};
+
+&dma1 {
+	sram = <&dma_pool>;
+};
+
+&dma2 {
+	sram = <&dma_pool>;
+};
+/* USER CODE END addons */
+
diff --git a/drivers/gpu/drm/bridge/Kconfig b/drivers/gpu/drm/bridge/Kconfig
index fe91c2050..6bcadabf9 100644
--- a/drivers/gpu/drm/bridge/Kconfig
+++ b/drivers/gpu/drm/bridge/Kconfig
@@ -135,4 +135,6 @@ source "drivers/gpu/drm/bridge/adv7511/Kconfig"
 
 source "drivers/gpu/drm/bridge/synopsys/Kconfig"
 
+source "drivers/gpu/drm/bridge/sn65dsi83/Kconfig"
+
 endmenu
diff --git a/drivers/gpu/drm/bridge/Makefile b/drivers/gpu/drm/bridge/Makefile
index 35f88d48e..a07766dc0 100644
--- a/drivers/gpu/drm/bridge/Makefile
+++ b/drivers/gpu/drm/bridge/Makefile
@@ -15,3 +15,4 @@ obj-$(CONFIG_DRM_ANALOGIX_DP) += analogix/
 obj-$(CONFIG_DRM_I2C_ADV7511) += adv7511/
 obj-$(CONFIG_DRM_TI_TFP410) += ti-tfp410.o
 obj-y += synopsys/
+obj-$(CONFIG_DRM_I2C_SN65DSI83) += sn65dsi83/
diff --git a/drivers/gpu/drm/bridge/sn65dsi83/Kconfig b/drivers/gpu/drm/bridge/sn65dsi83/Kconfig
new file mode 100644
index 000000000..1d8f37f68
--- /dev/null
+++ b/drivers/gpu/drm/bridge/sn65dsi83/Kconfig
@@ -0,0 +1,7 @@
+config DRM_I2C_SN65DSI83
+	bool "SN65DSI83 mipi dsi to lvds bridge"
+	depends on OF
+	select DRM_MIPI_DSI
+	default y
+	help
+	  Support for the sn65dsi83 MIPI DSI to LVDS bridge
diff --git a/drivers/gpu/drm/bridge/sn65dsi83/Makefile b/drivers/gpu/drm/bridge/sn65dsi83/Makefile
new file mode 100644
index 000000000..dee7f493b
--- /dev/null
+++ b/drivers/gpu/drm/bridge/sn65dsi83/Makefile
@@ -0,0 +1,2 @@
+sn65dsi83-objs := sn65dsi83_drv.o sn65dsi83_brg.o
+obj-$(CONFIG_DRM_I2C_SN65DSI83) := sn65dsi83.o
diff --git a/drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_brg.c b/drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_brg.c
new file mode 100644
index 000000000..952d09493
--- /dev/null
+++ b/drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_brg.c
@@ -0,0 +1,400 @@
+/*
+ * Copyright (C) 2018 CopuLab Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#include <linux/i2c.h>
+#include <linux/device.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/of_graph.h>
+#include <linux/slab.h>
+
+#include <drm/drmP.h>
+#include <drm/drm_atomic.h>
+#include <drm/drm_atomic_helper.h>
+#include <drm/drm_edid.h>
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_connector.h>
+#include <video/mipi_display.h>
+#include <video/of_videomode.h>
+#include <video/videomode.h>
+
+#include "sn65dsi83_brg.h"
+
+/* Register addresses */
+
+#define SN65DSI83_SOFT_RESET         0x09
+#define SN65DSI83_CORE_PLL           0x0A
+    #define LVDS_CLK_RANGE_SHIFT    1
+    #define HS_CLK_SRC_SHIFT        0
+
+#define SN65DSI83_PLL_DIV            0x0B
+    #define DSI_CLK_DIV_SHIFT       3
+
+#define SN65DSI83_PLL_EN             0x0D
+#define SN65DSI83_DSI_CFG            0x10
+    #define CHA_DSI_LANES_SHIFT    3
+
+#define SN65DSI83_DSI_EQ              0x11
+#define SN65DSI83_CHA_DSI_CLK_RNG     0x12
+#define SN65DSI83_CHB_DSI_CLK_RNG     0x13
+#define SN65DSI83_LVDS_MODE           0x18
+    #define DE_NEG_POLARITY_SHIFT 7
+    #define HS_NEG_POLARITY_SHIFT 6
+    #define VS_NEG_POLARITY_SHIFT 5
+    #define LVDS_LINK_CFG_SHIFT   4
+    #define CHA_24BPP_MODE_SHIFT  3
+    #define CHA_24BPP_FMT1_SHIFT  1
+
+#define SN65DSI83_LVDS_SIGN           0x19
+#define SN65DSI83_LVDS_TERM           0x1A
+#define SN65DSI83_LVDS_CM_ADJ         0x1B
+#define SN65DSI83_CHA_LINE_LEN_LO     0x20
+#define SN65DSI83_CHA_LINE_LEN_HI     0x21
+#define SN65DSI83_CHB_LINE_LEN_LO     0x22
+#define SN65DSI83_CHB_LINE_LEN_HI     0x23
+#define SN65DSI83_CHA_VERT_LINES_LO   0x24
+#define SN65DSI83_CHA_VERT_LINES_HI   0x25
+#define SN65DSI83_CHB_VERT_LINES_LO   0x26
+#define SN65DSI83_CHB_VERT_LINES_HI   0x27
+#define SN65DSI83_CHA_SYNC_DELAY_LO   0x28
+#define SN65DSI83_CHA_SYNC_DELAY_HI   0x29
+#define SN65DSI83_CHB_SYNC_DELAY_LO   0x2A
+#define SN65DSI83_CHB_SYNC_DELAY_HI   0x2B
+#define SN65DSI83_CHA_HSYNC_WIDTH_LO  0x2C
+#define SN65DSI83_CHA_HSYNC_WIDTH_HI  0x2D
+#define SN65DSI83_CHB_HSYNC_WIDTH_LO  0x2E
+#define SN65DSI83_CHB_HSYNC_WIDTH_HI  0x2F
+#define SN65DSI83_CHA_VSYNC_WIDTH_LO  0x30
+#define SN65DSI83_CHA_VSYNC_WIDTH_HI  0x31
+#define SN65DSI83_CHB_VSYNC_WIDTH_LO  0x32
+#define SN65DSI83_CHB_VSYNC_WIDTH_HI  0x33
+#define SN65DSI83_CHA_HORZ_BACKPORCH  0x34
+#define SN65DSI83_CHB_HORZ_BACKPORCH  0x35
+#define SN65DSI83_CHA_VERT_BACKPORCH  0x36
+#define SN65DSI83_CHB_VERT_BACKPORCH  0x37
+#define SN65DSI83_CHA_HORZ_FRONTPORCH 0x38
+#define SN65DSI83_CHB_HORZ_FRONTPORCH 0x39
+#define SN65DSI83_CHA_VERT_FRONTPORCH 0x3A
+#define SN65DSI83_CHB_VERT_FRONTPORCH 0x3B
+#define SN65DSI83_CHA_ERR             0xE5
+#define SN65DSI83_TEST_PATTERN        0x3C
+#define SN65DSI83_REG_3D              0x3D
+#define SN65DSI83_REG_3E              0x3E
+
+static int sn65dsi83_brg_power_on(struct sn65dsi83_brg *brg)
+{
+    dev_dbg(&brg->client->dev,"%s\n",__func__);
+    gpiod_set_value_cansleep(brg->gpio_enable, 1);
+    /* Wait for 1ms for the internal voltage regulator to stabilize */
+    msleep(1);
+
+    return 0;
+}
+
+static void sn65dsi83_brg_power_off(struct sn65dsi83_brg *brg)
+{
+    dev_dbg(&brg->client->dev,"%s\n",__func__);
+    gpiod_set_value_cansleep(brg->gpio_enable, 0);
+    /*
+     * The EN pin must be held low for at least 10 ms
+     * before being asserted high
+     */
+    msleep(10);
+}
+
+static int sn65dsi83_write(struct i2c_client *client, u8 reg, u8 val)
+{
+    int ret;
+
+    ret = i2c_smbus_write_byte_data(client, reg, val);
+
+    if (ret)
+        dev_err(&client->dev, "failed to write at 0x%02x", reg);
+
+    dev_dbg(&client->dev, "%s: write reg 0x%02x data 0x%02x", __func__, reg, val);
+
+    return ret;
+}
+#define SN65DSI83_WRITE(reg,val) sn65dsi83_write(client, (reg) , (val))
+
+static int sn65dsi83_read(struct i2c_client *client, u8 reg)
+{
+    int ret;
+
+    dev_dbg(&client->dev, "client 0x%p", client);
+    ret = i2c_smbus_read_byte_data(client, reg);
+
+    if (ret < 0) {
+        dev_err(&client->dev, "failed reading at 0x%02x", reg);
+        return ret;
+    }
+
+    dev_dbg(&client->dev, "%s: read reg 0x%02x data 0x%02x", __func__, reg, ret);
+
+    return ret;
+}
+#define SN65DSI83_READ(reg) sn65dsi83_read(client, (reg))
+
+static int sn65dsi83_brg_start_stream(struct sn65dsi83_brg *brg)
+{
+    int regval;
+    struct i2c_client *client = I2C_CLIENT(brg);
+
+    dev_dbg(&client->dev,"%s\n",__func__);
+    /* Set the PLL_EN bit (CSR 0x0D.0) */
+    SN65DSI83_WRITE(SN65DSI83_PLL_EN, 0x1);
+    /* Wait for the PLL_LOCK bit to be set (CSR 0x0A.7) */
+    msleep(200);
+
+    /* Perform SW reset to apply changes */
+    SN65DSI83_WRITE(SN65DSI83_SOFT_RESET, 0x01);
+
+    /* Read CHA Error register */
+    regval = SN65DSI83_READ(SN65DSI83_CHA_ERR);
+    dev_dbg(&client->dev, "CHA (0x%02x) = 0x%02x",
+         SN65DSI83_CHA_ERR, regval);
+
+	SN65DSI83_WRITE(SN65DSI83_CHA_ERR, 0xff);
+    regval = SN65DSI83_READ(SN65DSI83_CHA_ERR);
+    dev_dbg(&client->dev, "CHA (0x%02x) = 0x%02x",
+         SN65DSI83_CHA_ERR, regval);
+    msleep(10);
+
+    regval = SN65DSI83_READ(SN65DSI83_CHA_ERR);
+    dev_dbg(&client->dev, "CHA (0x%02x) = 0x%02x",
+         SN65DSI83_CHA_ERR, regval);
+
+    return 0;
+}
+
+static void sn65dsi83_brg_stop_stream(struct sn65dsi83_brg *brg)
+{
+    struct i2c_client *client = I2C_CLIENT(brg);
+    dev_dbg(&client->dev,"%s\n",__func__);
+    /* Clear the PLL_EN bit (CSR 0x0D.0) */
+    SN65DSI83_WRITE(SN65DSI83_PLL_EN, 0x00);
+}
+
+static int sn65dsi83_calk_clk_range(int min_regval, int max_regval,
+                unsigned long min_clk, unsigned long inc,
+                unsigned long target_clk)
+{
+    int regval = min_regval;
+    unsigned long clk = min_clk;
+
+    while (regval <= max_regval) {
+        if ((clk <= target_clk) && (target_clk < (clk + inc)))
+            return regval;
+
+        regval++;
+        clk += inc;
+    }
+
+    return -1;
+}
+
+#define ABS(X) ((X) < 0 ? (-1 * (X)) : (X))
+static int sn65dsi83_calk_div(int min_regval, int max_regval, int min_div,
+                int inc, unsigned long source_clk,
+                unsigned long target_clk)
+{
+    int regval = min_regval;
+    int div = min_div;
+    unsigned long curr_delta;
+    unsigned long prev_delta = ABS(DIV_ROUND_UP(source_clk, div) -
+                    target_clk);
+
+    while (regval <= max_regval) {
+        curr_delta = ABS(DIV_ROUND_UP(source_clk, div) - target_clk);
+        if (curr_delta > prev_delta)
+            return --regval;
+
+        regval++;
+        div += inc;
+    }
+
+    return -1;
+}
+
+static int sn65dsi83_brg_configure(struct sn65dsi83_brg *brg)
+{
+    int regval = 0;
+    struct i2c_client *client = I2C_CLIENT(brg);
+    struct videomode *vm = VM(brg);
+
+    u32 dsi_clk = (((PIXCLK * BPP(brg)) / DSI_LANES(brg)) >> 1);
+
+    dev_dbg(&client->dev, "DSI clock [ %u ] Hz\n",dsi_clk);
+    dev_dbg(&client->dev, "GeoMetry [ %d x %d ] Hz\n",HACTIVE,VACTIVE);
+
+    /* Reset PLL_EN and SOFT_RESET registers */
+    SN65DSI83_WRITE(SN65DSI83_SOFT_RESET,0x00);
+    SN65DSI83_WRITE(SN65DSI83_PLL_EN,0x00);
+
+    /* LVDS clock setup */
+    if  ((25000000 <= PIXCLK) && (PIXCLK < 37500000))
+        regval = 0;
+    else
+        regval = sn65dsi83_calk_clk_range(0x01, 0x05, 37500000, 25000000,
+                    PIXCLK);
+
+    if (regval < 0) {
+        dev_err(&client->dev, "failed to configure LVDS clock");
+        return -EINVAL;
+    }
+
+    regval = (regval << LVDS_CLK_RANGE_SHIFT);
+    regval |= (1 << HS_CLK_SRC_SHIFT); /* Use DSI clock */
+    SN65DSI83_WRITE(SN65DSI83_CORE_PLL,regval);
+
+    /* DSI clock range */
+    regval = sn65dsi83_calk_clk_range(0x08, 0x64, 40000000, 5000000, dsi_clk);
+    if (regval < 0) {
+        dev_err(&client->dev, "failed to configure DSI clock range\n");
+        return -EINVAL;
+    }
+    SN65DSI83_WRITE(SN65DSI83_CHA_DSI_CLK_RNG,regval);
+
+    /* DSI clock divider */
+    regval = sn65dsi83_calk_div(0x0, 0x18, 1, 1, dsi_clk, PIXCLK);
+    if (regval < 0) {
+        dev_err(&client->dev, "failed to calculate DSI clock divider");
+        return -EINVAL;
+    }
+
+    regval = regval << DSI_CLK_DIV_SHIFT;
+    SN65DSI83_WRITE(SN65DSI83_PLL_DIV,regval);
+
+    /* Configure DSI_LANES  */
+    regval = SN65DSI83_READ(SN65DSI83_DSI_CFG);
+    regval &= ~(3 << CHA_DSI_LANES_SHIFT);
+    regval |= ((4 - DSI_LANES(brg)) << CHA_DSI_LANES_SHIFT);
+    SN65DSI83_WRITE(SN65DSI83_DSI_CFG,regval);
+
+    /* CHA_DSI_DATA_EQ - No Equalization */
+    /* CHA_DSI_CLK_EQ  - No Equalization */
+    SN65DSI83_WRITE(SN65DSI83_DSI_EQ,0x00);
+
+    /* Video formats */
+    regval = 0;
+    if (FLAGS & DISPLAY_FLAGS_HSYNC_LOW)
+        regval |= (1 << HS_NEG_POLARITY_SHIFT);
+
+    if (FLAGS & DISPLAY_FLAGS_VSYNC_LOW)
+        regval |= (1 << VS_NEG_POLARITY_SHIFT);
+
+   if (FLAGS & DISPLAY_FLAGS_DE_LOW)
+	{
+		printk("Forced DE polarity High on SN65DSI83\n");
+       // regval |= (1 << DE_NEG_POLARITY_SHIFT);
+	}
+
+    if (BPP(brg) == 24)
+        regval |= (1 << CHA_24BPP_MODE_SHIFT);
+
+    if (FORMAT(brg) == 1)
+        regval |= (1 << CHA_24BPP_FMT1_SHIFT);
+
+    regval |= (1 << LVDS_LINK_CFG_SHIFT);
+    SN65DSI83_WRITE(SN65DSI83_LVDS_MODE,regval);
+
+    /* Voltage and pins */
+    SN65DSI83_WRITE(SN65DSI83_LVDS_SIGN,0x00);
+    SN65DSI83_WRITE(SN65DSI83_LVDS_TERM,0x03);
+    SN65DSI83_WRITE(SN65DSI83_LVDS_CM_ADJ,0x00);
+
+    /* Configure sync delay to minimal allowed value */
+    SN65DSI83_WRITE(SN65DSI83_CHA_SYNC_DELAY_LO,0x21);
+    SN65DSI83_WRITE(SN65DSI83_CHA_SYNC_DELAY_HI,0x00);
+
+    /* Geometry */
+    SN65DSI83_WRITE(SN65DSI83_CHA_LINE_LEN_LO,LOW(HACTIVE));
+    SN65DSI83_WRITE(SN65DSI83_CHA_LINE_LEN_HI,HIGH(HACTIVE));
+
+    SN65DSI83_WRITE(SN65DSI83_CHA_VERT_LINES_LO,LOW(VACTIVE));
+    SN65DSI83_WRITE(SN65DSI83_CHA_VERT_LINES_HI,HIGH(VACTIVE));
+
+    SN65DSI83_WRITE(SN65DSI83_CHA_HSYNC_WIDTH_LO,LOW(HPW));
+    SN65DSI83_WRITE(SN65DSI83_CHA_HSYNC_WIDTH_HI,HIGH(HPW));
+
+    SN65DSI83_WRITE(SN65DSI83_CHA_VSYNC_WIDTH_LO,LOW(VPW));
+    SN65DSI83_WRITE(SN65DSI83_CHA_VSYNC_WIDTH_HI,HIGH(VPW));
+
+    SN65DSI83_WRITE(SN65DSI83_CHA_HORZ_BACKPORCH,LOW(HBP));
+    SN65DSI83_WRITE(SN65DSI83_CHA_VERT_BACKPORCH,LOW(VBP));
+
+    SN65DSI83_WRITE(SN65DSI83_CHA_HORZ_FRONTPORCH,LOW(HFP));
+    SN65DSI83_WRITE(SN65DSI83_CHA_VERT_FRONTPORCH,LOW(VFP));
+
+    SN65DSI83_WRITE(SN65DSI83_TEST_PATTERN,0x00);
+    SN65DSI83_WRITE(SN65DSI83_REG_3D,0x00);
+    SN65DSI83_WRITE(SN65DSI83_REG_3E,0x00);
+
+    /* mute channel B */
+    SN65DSI83_WRITE(SN65DSI83_CHB_DSI_CLK_RNG, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_LINE_LEN_LO, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_LINE_LEN_HI, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_VERT_LINES_LO, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_VERT_LINES_HI, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_SYNC_DELAY_LO, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_SYNC_DELAY_HI, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_HSYNC_WIDTH_LO, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_HSYNC_WIDTH_HI, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_VSYNC_WIDTH_LO, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_VSYNC_WIDTH_HI, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_HORZ_BACKPORCH, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_VERT_BACKPORCH, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_HORZ_FRONTPORCH, 0x00);
+    SN65DSI83_WRITE(SN65DSI83_CHB_VERT_FRONTPORCH, 0x00);
+    return 0;
+}
+
+static int sn65dsi83_brg_setup(struct sn65dsi83_brg *brg)
+{
+    struct i2c_client *client = I2C_CLIENT(brg);
+    dev_dbg(&client->dev,"%s\n",__func__);
+    sn65dsi83_brg_power_on(brg);
+    return sn65dsi83_brg_configure(brg);
+}
+
+static int sn65dsi83_brg_reset(struct sn65dsi83_brg *brg)
+{
+    /* Soft Reset reg value at power on should be 0x00 */
+    struct i2c_client *client = I2C_CLIENT(brg);
+    int ret = SN65DSI83_READ(SN65DSI83_SOFT_RESET);
+    dev_dbg(&client->dev,"%s\n",__func__);
+    if (ret != 0x00) {
+        dev_err(&client->dev,"Failed to reset the device");
+        return -ENODEV;
+    }
+    return 0;
+}
+
+static struct sn65dsi83_brg_funcs brg_func = {
+    .power_on = sn65dsi83_brg_power_on,
+    .power_off = sn65dsi83_brg_power_off,
+    .setup = sn65dsi83_brg_setup,
+    .reset = sn65dsi83_brg_reset,
+    .start_stream = sn65dsi83_brg_start_stream,
+    .stop_stream = sn65dsi83_brg_stop_stream,
+};
+
+static struct sn65dsi83_brg brg = {
+    .funcs = &brg_func,
+};
+
+struct sn65dsi83_brg *sn65dsi83_brg_get(void) {
+    return &brg;
+}
diff --git a/drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_brg.h b/drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_brg.h
new file mode 100644
index 000000000..9f23df8af
--- /dev/null
+++ b/drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_brg.h
@@ -0,0 +1,55 @@
+#ifndef _SN65DSI83_BRG_H__
+#define _SN65DSI83_BRG_H__
+
+#include <linux/i2c.h>
+#include <linux/gpio/consumer.h>
+#include <video/videomode.h>
+
+struct sn65dsi83_brg;
+struct sn65dsi83_brg_funcs {
+    int (*power_on)(struct sn65dsi83_brg *sn65dsi8383_brg);
+    void (*power_off)(struct sn65dsi83_brg *sn65dsi8383_brg);
+    int (*reset)(struct sn65dsi83_brg *sn65dsi8383_brg);
+    int (*setup)(struct sn65dsi83_brg *sn65dsi8383_brg);
+    int (*start_stream)(struct sn65dsi83_brg *sn65dsi8383_brg);
+    void (*stop_stream)(struct sn65dsi83_brg *sn65dsi8383_brg);
+};
+
+struct sn65dsi83_brg {
+    struct i2c_client *client;
+    struct gpio_desc *gpio_enable;
+    /* Bridge Panel Parameters */
+    struct videomode vm;
+    u32 width_mm;
+    u32 height_mm;
+    u32 format;
+    u32 bpp;
+
+    u8 num_dsi_lanes;
+    struct sn65dsi83_brg_funcs *funcs;
+};
+struct sn65dsi83_brg *sn65dsi83_brg_get(void);
+
+#define I2C_DEVICE(A) &(A)->client->dev
+#define I2C_CLIENT(A) (A)->client
+#define VM(A) &(A)->vm
+#define BPP(A) (A)->bpp
+#define FORMAT(A) (A)->format
+#define DSI_LANES(A) (A)->num_dsi_lanes
+
+/* The caller has to have a vm structure defined */
+#define PIXCLK vm->pixelclock
+#define HACTIVE vm->hactive
+#define HFP vm->hfront_porch
+#define HBP vm->hback_porch
+#define HPW vm->hsync_len
+#define VACTIVE vm->vactive
+#define VFP vm->vfront_porch
+#define VBP vm->vback_porch
+#define VPW vm->vsync_len
+#define FLAGS vm->flags
+
+#define HIGH(A) (((A) >> 8) & 0xFF)
+#define LOW(A)  ((A)  & 0xFF)
+
+#endif /* _SN65DSI83_BRG_H__ */
diff --git a/drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_drv.c b/drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_drv.c
new file mode 100644
index 000000000..59eb2ae79
--- /dev/null
+++ b/drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_drv.c
@@ -0,0 +1,473 @@
+/*
+ * Licensed under the GPL-2.
+ */
+#include <linux/device.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/of_graph.h>
+#include <linux/slab.h>
+
+#include <drm/drmP.h>
+#include <drm/drm_atomic.h>
+#include <drm/drm_atomic_helper.h>
+#include <drm/drm_edid.h>
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_connector.h>
+#include <drm/drm_crtc_helper.h>
+#include <video/mipi_display.h>
+#include <video/of_videomode.h>
+#include <video/videomode.h>
+
+#include "sn65dsi83_timing.h"
+#include "sn65dsi83_brg.h"
+
+struct sn65dsi83 {
+    u8 channel_id;
+    enum drm_connector_status status;
+    bool powered;
+    struct drm_display_mode curr_mode;
+    struct drm_bridge bridge;
+    struct drm_connector connector;
+    struct device_node *host_node;
+    struct mipi_dsi_device *dsi;
+    struct sn65dsi83_brg *brg;
+};
+
+static int sn65dsi83_attach_dsi(struct sn65dsi83 *sn65dsi83);
+#define DRM_DEVICE(A) A->dev->dev
+/* Connector funcs */
+static struct sn65dsi83 *connector_to_sn65dsi83(struct drm_connector *connector)
+{
+    return container_of(connector, struct sn65dsi83, connector);
+}
+
+static int sn65dsi83_connector_get_modes(struct drm_connector *connector)
+{
+    struct sn65dsi83 *sn65dsi83 = connector_to_sn65dsi83(connector);
+    struct sn65dsi83_brg *brg = sn65dsi83->brg;
+    struct device *dev = connector->dev->dev;
+    struct drm_display_mode *mode;
+    u32 bus_format = MEDIA_BUS_FMT_RGB888_1X24;
+    u32 *bus_flags = &connector->display_info.bus_flags;
+    int ret;
+
+    dev_dbg(dev, "%s\n",__func__);
+    mode = drm_mode_create(connector->dev);
+    if (!mode) {
+        DRM_DEV_ERROR(dev, "Failed to create display mode!\n");
+        return 0;
+    }
+
+    drm_display_mode_from_videomode(&brg->vm, mode);
+    mode->width_mm = brg->width_mm;
+    mode->height_mm = brg->height_mm;
+    mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+
+    dev_dbg(dev, "%s: mode: %d*%d@%d is valid\n",__func__,
+            mode->hdisplay,mode->vdisplay,mode->clock);
+
+	drm_mode_set_name(mode);
+    drm_mode_probed_add(connector, mode);
+    drm_connector_list_update(connector);
+
+    connector->display_info.width_mm = mode->width_mm;
+    connector->display_info.height_mm = mode->height_mm;
+
+//    connector->force = DRM_FORCE_ON;
+
+    if (brg->vm.flags & DISPLAY_FLAGS_DE_HIGH)
+	{
+        *bus_flags |= DRM_BUS_FLAG_DE_HIGH;
+		dev_dbg(dev, "DISPLAY_FLAGS_DE_HIGH bus_flag=0x%x\n", *bus_flags);
+	}
+    if (brg->vm.flags & DISPLAY_FLAGS_DE_LOW)
+	{
+		dev_dbg(dev, "DISPLAY_FLAGS_DE_LOW\n");
+        *bus_flags |= DRM_BUS_FLAG_DE_LOW;
+	}
+    if (brg->vm.flags & DISPLAY_FLAGS_PIXDATA_NEGEDGE)
+        *bus_flags |= DRM_BUS_FLAG_PIXDATA_NEGEDGE;
+    if (brg->vm.flags & DISPLAY_FLAGS_PIXDATA_POSEDGE)
+        *bus_flags |= DRM_BUS_FLAG_PIXDATA_POSEDGE;
+
+    ret = drm_display_info_set_bus_formats(&connector->display_info,
+                           &bus_format, 1);
+    if (ret)
+        return ret;
+ 
+   dev_dbg(dev, "%s DONE\n",__func__);
+
+    return 1;
+}
+
+static enum drm_mode_status
+sn65dsi83_connector_mode_valid(struct drm_connector *connector,
+                 struct drm_display_mode *mode)
+{
+    struct sn65dsi83 *sn65dsi83 = connector_to_sn65dsi83(connector);
+    struct device *dev = connector->dev->dev;
+	if (mode->clock > ( sn65dsi83->brg->vm.pixelclock / 1000 ))
+		return MODE_CLOCK_HIGH;
+
+    dev_info(dev, "%s: mode: %d*%d@%d is valid\n",__func__,
+            mode->hdisplay,mode->vdisplay,mode->clock);
+
+	//drm_kms_helper_hotplug_event(connector->dev);
+    return MODE_OK;
+}
+
+static struct drm_connector_helper_funcs sn65dsi83_connector_helper_funcs = {
+    .get_modes = sn65dsi83_connector_get_modes,
+    .mode_valid = sn65dsi83_connector_mode_valid,
+};
+
+static enum drm_connector_status
+sn65dsi83_connector_detect(struct drm_connector *connector, bool force)
+{
+    struct sn65dsi83 *sn65dsi83 = connector_to_sn65dsi83(connector);
+    struct device *dev = connector->dev->dev;
+    dev_dbg(dev, "%s\n",__func__);
+
+    sn65dsi83->status = connector_status_connected;
+    return connector_status_connected;
+}
+
+static int sn65dsi83_drm_helper_connector_dpms(struct drm_connector *connector, int mode)
+{
+    struct device *dev = connector->dev->dev;
+    dev_dbg(dev, "%s\n",__func__);
+	drm_helper_connector_dpms(connector, DRM_MODE_DPMS_OFF);
+	drm_helper_connector_dpms(connector, DRM_MODE_DPMS_ON);
+	return 0;
+}
+
+static struct drm_connector_funcs sn65dsi83_connector_funcs = {
+//    .dpms = drm_atomic_helper_connector_dpms,
+	.dpms = sn65dsi83_drm_helper_connector_dpms,
+    .fill_modes = drm_helper_probe_single_connector_modes,
+    .detect = sn65dsi83_connector_detect,
+    .destroy = drm_connector_cleanup,
+    .reset = drm_atomic_helper_connector_reset,
+    .atomic_duplicate_state = drm_atomic_helper_connector_duplicate_state,
+    .atomic_destroy_state = drm_atomic_helper_connector_destroy_state,
+};
+
+/* Bridge funcs */
+static struct sn65dsi83 *bridge_to_sn65dsi83(struct drm_bridge *bridge)
+{
+    return container_of(bridge, struct sn65dsi83, bridge);
+}
+
+static void sn65dsi83_bridge_enable(struct drm_bridge *bridge)
+{
+    struct sn65dsi83 *sn65dsi83 = bridge_to_sn65dsi83(bridge);
+    dev_dbg(DRM_DEVICE(bridge),"%s\n",__func__);
+    sn65dsi83->brg->funcs->setup(sn65dsi83->brg);
+    sn65dsi83->brg->funcs->start_stream(sn65dsi83->brg);
+}
+
+static void sn65dsi83_bridge_disable(struct drm_bridge *bridge)
+{
+    struct sn65dsi83 *sn65dsi83 = bridge_to_sn65dsi83(bridge);
+    dev_dbg(DRM_DEVICE(bridge),"%s\n",__func__);
+
+    sn65dsi83->brg->funcs->stop_stream(sn65dsi83->brg);
+    sn65dsi83->brg->funcs->power_off(sn65dsi83->brg);
+}
+
+static void sn65dsi83_bridge_mode_set(struct drm_bridge *bridge,
+                    struct drm_display_mode *mode,
+                    struct drm_display_mode *adj_mode)
+{
+    struct sn65dsi83 *sn65dsi83 = bridge_to_sn65dsi83(bridge);
+    dev_dbg(DRM_DEVICE(bridge), "%s: mode: %d*%d@%d\n",__func__,
+            mode->hdisplay,mode->vdisplay,mode->clock);
+    drm_mode_copy(&sn65dsi83->curr_mode, adj_mode);
+}
+
+static int sn65dsi83_bridge_attach(struct drm_bridge *bridge)
+{
+    struct sn65dsi83 *sn65dsi83 = bridge_to_sn65dsi83(bridge);
+    int ret;
+
+    dev_dbg(DRM_DEVICE(bridge),"%s\n",__func__);
+    if (!bridge->encoder) {
+        DRM_ERROR("Parent encoder object not found");
+        return -ENODEV;
+    }
+
+    sn65dsi83->connector.polled = DRM_CONNECTOR_POLL_CONNECT;
+
+    ret = drm_connector_init(bridge->dev, &sn65dsi83->connector,
+                 &sn65dsi83_connector_funcs,
+                 DRM_MODE_CONNECTOR_DSI);
+    if (ret) {
+        DRM_ERROR("Failed to initialize connector with drm\n");
+        return ret;
+    }
+    drm_connector_helper_add(&sn65dsi83->connector,
+                 &sn65dsi83_connector_helper_funcs);
+    drm_connector_attach_encoder(&sn65dsi83->connector, bridge->encoder);
+
+    ret = sn65dsi83_attach_dsi(sn65dsi83);
+
+	// MM
+	//drm_bridge_enable(bridge);
+    return ret;
+}
+
+static void sn65dsi83_post_disable(struct drm_bridge *bridge)
+{
+    dev_dbg(DRM_DEVICE(bridge),"%s\n",__func__);
+}
+
+static struct drm_bridge_funcs sn65dsi83_bridge_funcs = {
+    .enable = sn65dsi83_bridge_enable,
+    .disable = sn65dsi83_bridge_disable,
+    .mode_set = sn65dsi83_bridge_mode_set,
+    .attach = sn65dsi83_bridge_attach,
+    .post_disable = sn65dsi83_post_disable,
+};
+
+static int sn65dsi83_parse_dt(struct device_node *np,
+    struct sn65dsi83 *sn65dsi83)
+{
+    struct device *dev = &sn65dsi83->brg->client->dev;
+    u32 num_lanes = 4, bpp = 24, format = 2, width = 149, height = 93;
+    struct device_node *endpoint;
+
+	dev_dbg(dev, "sn65dsi83_parse_dt\n");
+
+    endpoint = of_graph_get_next_endpoint(np, NULL);
+    if (!endpoint)
+        return -ENODEV;
+
+    sn65dsi83->host_node = of_graph_get_remote_port_parent(endpoint);
+    if (!sn65dsi83->host_node) {
+        of_node_put(endpoint);
+        return -ENODEV;
+    }
+
+	dev_dbg(dev, "sn65dsi83_parse_dt... parsing dt\n");
+    of_property_read_u32(np, "ti,dsi-lanes", &num_lanes);
+    of_property_read_u32(np, "ti,lvds-format", &format);
+    of_property_read_u32(np, "ti,lvds-bpp", &bpp);
+    of_property_read_u32(np, "ti,width-mm", &width);
+    of_property_read_u32(np, "ti,height-mm", &height);
+
+    if (num_lanes < 1 || num_lanes > 4) {
+        dev_err(dev, "Invalid dsi-lanes: %d\n", num_lanes);
+        return -EINVAL;
+    }
+    sn65dsi83->brg->num_dsi_lanes = num_lanes;
+
+    sn65dsi83->brg->gpio_enable = devm_gpiod_get(dev, "enable", GPIOD_OUT_LOW);
+    if (IS_ERR(sn65dsi83->brg->gpio_enable)) {
+        dev_err(dev, "failed to parse enable gpio");
+        return PTR_ERR(sn65dsi83->brg->gpio_enable);
+    }
+
+    sn65dsi83->brg->format = format;
+    sn65dsi83->brg->bpp = bpp;
+
+    sn65dsi83->brg->width_mm = width;
+    sn65dsi83->brg->height_mm = height;
+
+    /* Read default timing if there is not device tree node for */
+    if ((of_get_videomode(np, &sn65dsi83->brg->vm, 0)) < 0)
+	{
+		 dev_dbg(dev, "******** panel_default_timing\n");  
+        videomode_from_timing(&panel_default_timing, &sn65dsi83->brg->vm);
+	}
+
+    of_node_put(endpoint);
+    of_node_put(sn65dsi83->host_node);
+
+    return 0;
+}
+
+static int sn65dsi83_attach_dsi_pre(struct sn65dsi83 *sn65dsi83);
+
+static int sn65dsi83_probe(struct i2c_client *i2c,
+    const struct i2c_device_id *id)
+{
+    struct sn65dsi83 *sn65dsi83;
+    struct device *dev = &i2c->dev;
+    int ret;
+
+    dev_dbg(dev,"%s\n",__func__);
+    if (!dev->of_node)
+        return -EINVAL;
+
+    sn65dsi83 = devm_kzalloc(dev, sizeof(*sn65dsi83), GFP_KERNEL);
+    if (!sn65dsi83)
+        return -ENOMEM;
+
+    /* Initialize it before DT parser */
+    sn65dsi83->brg = sn65dsi83_brg_get();
+    sn65dsi83->brg->client = i2c;
+
+    sn65dsi83->powered = false;
+    sn65dsi83->status = connector_status_disconnected;
+
+    i2c_set_clientdata(i2c, sn65dsi83);
+
+    ret = sn65dsi83_parse_dt(dev->of_node, sn65dsi83);
+    if (ret)
+        return ret;
+
+    sn65dsi83->brg->funcs->power_off(sn65dsi83->brg);
+    sn65dsi83->brg->funcs->power_on(sn65dsi83->brg);
+    ret  = sn65dsi83->brg->funcs->reset(sn65dsi83->brg);
+    if (ret != 0x00) {
+        dev_err(dev, "Failed to reset the device");
+        return -ENODEV;
+    }
+    sn65dsi83->brg->funcs->power_off(sn65dsi83->brg);
+
+
+
+    sn65dsi83->bridge.funcs = &sn65dsi83_bridge_funcs;
+    sn65dsi83->bridge.of_node = dev->of_node;
+
+    drm_bridge_add(&sn65dsi83->bridge);
+
+    sn65dsi83_attach_dsi_pre(sn65dsi83);    // Forced DSI attach
+
+    return ret;
+}
+
+static int sn65dsi83_attach_dsi_pre(struct sn65dsi83 *sn65dsi83)
+{
+    struct device *dev = &sn65dsi83->brg->client->dev;
+    struct mipi_dsi_host *host;
+    struct mipi_dsi_device *dsi;
+    int ret = 0;
+    const struct mipi_dsi_device_info info = { .type = "sn65dsi83",
+                           .channel = 0,
+                           .node = NULL,
+                         };
+
+    dev_dbg(dev, "%s\n",__func__);
+    host = of_find_mipi_dsi_host_by_node(sn65dsi83->host_node);
+    if (!host) {
+        dev_err(dev, "failed to find dsi host\n");
+        return -EPROBE_DEFER;
+    }
+
+    dsi = mipi_dsi_device_register_full(host, &info);
+    if (IS_ERR(dsi)) {
+        dev_err(dev, "failed to create dsi device\n");
+        ret = PTR_ERR(dsi);
+        return -ENODEV;
+    }
+
+    sn65dsi83->dsi = dsi;
+
+    dsi->lanes = sn65dsi83->brg->num_dsi_lanes;
+    dsi->format = MIPI_DSI_FMT_RGB888;
+//    dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_HSE |
+//               MIPI_DSI_CLOCK_NON_CONTINUOUS | MIPI_DSI_MODE_VIDEO_BURST;
+
+#ifdef ICORE_IMX8MM
+  dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_HSE;
+#else
+  dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_HSE |
+              MIPI_DSI_CLOCK_NON_CONTINUOUS;
+#endif
+
+  dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_HSE;
+
+//	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_SYNC_PULSE |
+//			  MIPI_DSI_MODE_EOT_PACKET | MIPI_DSI_MODE_VIDEO_HSE;
+
+    ret = mipi_dsi_attach(dsi);
+    if (ret < 0) {
+        dev_err(dev, "failed to attach dsi to host\n");
+        mipi_dsi_device_unregister(dsi);
+    }
+
+    return ret;
+}
+
+
+static int sn65dsi83_attach_dsi(struct sn65dsi83 *sn65dsi83)
+{
+    struct device *dev = &sn65dsi83->brg->client->dev;
+    int ret = 0;
+
+    dev_dbg(dev, "%s EMPTY FUNC\n",__func__);
+//    sn65dsi83_attach_dsi_pre(sn65dsi83);
+
+    return ret;
+}
+
+static void sn65dsi83_detach_dsi(struct sn65dsi83 *sn65dsi83)
+{
+    struct device *dev = &sn65dsi83->brg->client->dev;
+    dev_dbg(dev, "%s\n",__func__);
+    mipi_dsi_detach(sn65dsi83->dsi);
+    mipi_dsi_device_unregister(sn65dsi83->dsi);
+}
+
+static int sn65dsi83_remove(struct i2c_client *i2c)
+{
+    struct sn65dsi83 *sn65dsi83 = i2c_get_clientdata(i2c);
+    struct device *dev = &sn65dsi83->brg->client->dev;
+    dev_dbg(dev, "%s\n",__func__);
+
+    sn65dsi83_detach_dsi(sn65dsi83);
+    drm_bridge_remove(&sn65dsi83->bridge);
+
+    return 0;
+}
+
+static const struct i2c_device_id sn65dsi83_i2c_ids[] = {
+    { "sn65dsi83", 0 },
+    { }
+};
+MODULE_DEVICE_TABLE(i2c, sn65dsi83_i2c_ids);
+
+static const struct of_device_id sn65dsi83_of_ids[] = {
+    { .compatible = "ti,sn65dsi83" },
+    { }
+};
+MODULE_DEVICE_TABLE(of, sn65dsi83_of_ids);
+
+static struct mipi_dsi_driver sn65dsi83_dsi_driver = {
+    .driver.name = "sn65dsi83",
+};
+
+static struct i2c_driver sn65dsi83_driver = {
+    .driver = {
+        .name = "sn65dsi83",
+        .of_match_table = sn65dsi83_of_ids,
+    },
+    .id_table = sn65dsi83_i2c_ids,
+    .probe = sn65dsi83_probe,
+    .remove = sn65dsi83_remove,
+};
+
+static int __init sn65dsi83_init(void)
+{
+    if (IS_ENABLED(CONFIG_DRM_MIPI_DSI))
+        mipi_dsi_driver_register(&sn65dsi83_dsi_driver);
+
+    return i2c_add_driver(&sn65dsi83_driver);
+}
+module_init(sn65dsi83_init);
+
+static void __exit sn65dsi83_exit(void)
+{
+    i2c_del_driver(&sn65dsi83_driver);
+
+    if (IS_ENABLED(CONFIG_DRM_MIPI_DSI))
+        mipi_dsi_driver_unregister(&sn65dsi83_dsi_driver);
+}
+module_exit(sn65dsi83_exit);
+
+MODULE_AUTHOR("CompuLab <compulab@compula.co.il>");
+MODULE_DESCRIPTION("SN65DSI bridge driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_timing.h b/drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_timing.h
new file mode 100644
index 000000000..e9bb6633c
--- /dev/null
+++ b/drivers/gpu/drm/bridge/sn65dsi83/sn65dsi83_timing.h
@@ -0,0 +1,33 @@
+#ifndef __SN65DSI83_TIMING_H__
+#define __SN65DSI83_TIMING_H__
+
+/* Default Video Parameters */
+#define PIXCLK_INIT 62500000
+
+#define HACTIVE_INIT 1280
+#define HPW_INIT 2
+#define HBP_INIT 6
+#define HFP_INIT 5
+
+#define VACTIVE_INIT 800
+#define VPW_INIT 1
+#define VBP_INIT 2
+#define VFP_INIT 3
+
+static const struct display_timing panel_default_timing = {
+    .pixelclock = { PIXCLK_INIT, PIXCLK_INIT, PIXCLK_INIT },
+    .hactive = { HACTIVE_INIT, HACTIVE_INIT, HACTIVE_INIT },
+    .hfront_porch = { HFP_INIT, HFP_INIT, HFP_INIT },
+    .hsync_len = { HPW_INIT, HPW_INIT, HPW_INIT },
+    .hback_porch = { HBP_INIT, HBP_INIT, HBP_INIT },
+    .vactive = { VACTIVE_INIT, VACTIVE_INIT, VACTIVE_INIT },
+    .vfront_porch = { VFP_INIT, VFP_INIT, VFP_INIT },
+    .vsync_len = { VPW_INIT, VPW_INIT, VPW_INIT },
+    .vback_porch = { VBP_INIT, VBP_INIT, VBP_INIT },
+    .flags = DISPLAY_FLAGS_HSYNC_LOW |
+         DISPLAY_FLAGS_VSYNC_LOW |
+         DISPLAY_FLAGS_DE_LOW |
+         DISPLAY_FLAGS_PIXDATA_NEGEDGE,
+};
+
+#endif /* __SN65DSI83_TIMING_H__ */
-- 
2.17.1

